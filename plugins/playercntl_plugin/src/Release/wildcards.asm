; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\Max\Bastelstube\FL\FLHook Source\flhookplugin_MoD\plugins\playercntl_plugin\src\wildcards.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?asterisk@Wildcard@@CAHPAPBD0@Z			; Wildcard::asterisk
PUBLIC	?set@Wildcard@@CAHPAPBD0@Z			; Wildcard::set
PUBLIC	?wildcardfit@Wildcard@@SAHPBD0@Z		; Wildcard::wildcardfit
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv132 = -12						; size = 4
tv71 = -8						; size = 4
_fit$ = -4						; size = 4
_wildcard$ = 8						; size = 4
_test$ = 12						; size = 4
?wildcardfit@Wildcard@@SAHPBD0@Z PROC			; Wildcard::wildcardfit
; File g:\max\bastelstube\fl\flhook source\flhookplugin_mod\plugins\playercntl_plugin\src\wildcards.cpp
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 16
	mov	DWORD PTR _fit$[ebp], 1
; Line 18
	jmp	SHORT $LN11@wildcardfi
$LN10@wildcardfi:
	mov	eax, DWORD PTR _wildcard$[ebp]
	add	eax, 1
	mov	DWORD PTR _wildcard$[ebp], eax
$LN11@wildcardfi:
	mov	ecx, DWORD PTR _wildcard$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN2@wildcardfi
	cmp	DWORD PTR _fit$[ebp], 1
	jne	$LN2@wildcardfi
	mov	eax, DWORD PTR _test$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN2@wildcardfi
; Line 20
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv71[ebp], al
	cmp	BYTE PTR tv71[ebp], 42			; 0000002aH
	je	SHORT $LN4@wildcardfi
	cmp	BYTE PTR tv71[ebp], 63			; 0000003fH
	je	SHORT $LN5@wildcardfi
	cmp	BYTE PTR tv71[ebp], 91			; 0000005bH
	je	SHORT $LN6@wildcardfi
	jmp	SHORT $LN3@wildcardfi
$LN6@wildcardfi:
; Line 23
	mov	ecx, DWORD PTR _wildcard$[ebp]
	add	ecx, 1
	mov	DWORD PTR _wildcard$[ebp], ecx
; Line 24
	lea	edx, DWORD PTR _test$[ebp]
	push	edx
	lea	eax, DWORD PTR _wildcard$[ebp]
	push	eax
	call	?set@Wildcard@@CAHPAPBD0@Z		; Wildcard::set
	add	esp, 8
	mov	DWORD PTR _fit$[ebp], eax
; Line 27
	jmp	SHORT $LN7@wildcardfi
$LN5@wildcardfi:
; Line 29
	mov	ecx, DWORD PTR _test$[ebp]
	add	ecx, 1
	mov	DWORD PTR _test$[ebp], ecx
; Line 30
	jmp	SHORT $LN7@wildcardfi
$LN4@wildcardfi:
; Line 32
	lea	edx, DWORD PTR _test$[ebp]
	push	edx
	lea	eax, DWORD PTR _wildcard$[ebp]
	push	eax
	call	?asterisk@Wildcard@@CAHPAPBD0@Z		; Wildcard::asterisk
	add	esp, 8
	mov	DWORD PTR _fit$[ebp], eax
; Line 35
	mov	ecx, DWORD PTR _wildcard$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _wildcard$[ebp], ecx
; Line 36
	jmp	SHORT $LN7@wildcardfi
$LN3@wildcardfi:
; Line 38
	mov	edx, DWORD PTR _wildcard$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _test$[ebp]
	movsx	edx, BYTE PTR [ecx]
	xor	ecx, ecx
	cmp	eax, edx
	sete	cl
	mov	DWORD PTR _fit$[ebp], ecx
; Line 39
	mov	edx, DWORD PTR _test$[ebp]
	add	edx, 1
	mov	DWORD PTR _test$[ebp], edx
$LN7@wildcardfi:
; Line 41
	jmp	$LN10@wildcardfi
$LN2@wildcardfi:
; Line 42
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN1@wildcardfi
	cmp	DWORD PTR _fit$[ebp], 1
	jne	SHORT $LN1@wildcardfi
; Line 45
	mov	edx, DWORD PTR _wildcard$[ebp]
	add	edx, 1
	mov	DWORD PTR _wildcard$[ebp], edx
	jmp	SHORT $LN2@wildcardfi
$LN1@wildcardfi:
; Line 46
	cmp	DWORD PTR _fit$[ebp], 1
	jne	SHORT $LN14@wildcardfi
	mov	eax, DWORD PTR _test$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN14@wildcardfi
	mov	edx, DWORD PTR _wildcard$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN14@wildcardfi
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN15@wildcardfi
$LN14@wildcardfi:
	mov	DWORD PTR tv132[ebp], 0
$LN15@wildcardfi:
	mov	eax, DWORD PTR tv132[ebp]
; Line 47
	mov	esp, ebp
	pop	ebp
	ret	0
?wildcardfit@Wildcard@@SAHPBD0@Z ENDP			; Wildcard::wildcardfit
; Function compile flags: /Odtp
_fit$ = -12						; size = 4
_at_beginning$ = -8					; size = 4
_negation$ = -4						; size = 4
_wildcard$ = 8						; size = 4
_test$ = 12						; size = 4
?set@Wildcard@@CAHPAPBD0@Z PROC				; Wildcard::set
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 52
	mov	DWORD PTR _fit$[ebp], 0
; Line 53
	mov	DWORD PTR _negation$[ebp], 0
; Line 54
	mov	DWORD PTR _at_beginning$[ebp], 1
; Line 56
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 33					; 00000021H
	jne	SHORT $LN10@set
; Line 58
	mov	DWORD PTR _negation$[ebp], 1
; Line 59
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR [edx], ecx
$LN10@set:
; Line 61
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 93					; 0000005dH
	jne	SHORT $LN8@set
	cmp	DWORD PTR _at_beginning$[ebp], 1
	jne	$LN9@set
$LN8@set:
; Line 63
	cmp	DWORD PTR _fit$[ebp], 0
	jne	$LN7@set
; Line 68
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN6@set
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx-1]
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx+1]
	cmp	edx, eax
	jge	SHORT $LN6@set
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN6@set
	cmp	DWORD PTR _at_beginning$[ebp], 0
	jne	SHORT $LN6@set
; Line 71
	mov	ecx, DWORD PTR _test$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	ecx, BYTE PTR [edx-1]
	cmp	eax, ecx
	jl	SHORT $LN5@set
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	edx, BYTE PTR [eax+1]
	cmp	ecx, edx
	jg	SHORT $LN5@set
; Line 73
	mov	DWORD PTR _fit$[ebp], 1
; Line 74
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR [edx], ecx
$LN5@set:
; Line 76
	jmp	SHORT $LN7@set
$LN6@set:
; Line 77
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN7@set
; Line 79
	mov	DWORD PTR _fit$[ebp], 1
$LN7@set:
; Line 82
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR [eax], edx
; Line 83
	mov	DWORD PTR _at_beginning$[ebp], 0
; Line 84
	jmp	$LN10@set
$LN9@set:
; Line 85
	cmp	DWORD PTR _negation$[ebp], 1
	jne	SHORT $LN2@set
; Line 87
	mov	ecx, 1
	sub	ecx, DWORD PTR _fit$[ebp]
	mov	DWORD PTR _fit$[ebp], ecx
$LN2@set:
; Line 88
	cmp	DWORD PTR _fit$[ebp], 1
	jne	SHORT $LN1@set
; Line 89
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@set:
; Line 91
	mov	eax, DWORD PTR _fit$[ebp]
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?set@Wildcard@@CAHPAPBD0@Z ENDP				; Wildcard::set
; Function compile flags: /Odtp
tv154 = -8						; size = 4
_fit$ = -4						; size = 4
_wildcard$ = 8						; size = 4
_test$ = 12						; size = 4
?asterisk@Wildcard@@CAHPAPBD0@Z PROC			; Wildcard::asterisk
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 98
	mov	DWORD PTR _fit$[ebp], 1
; Line 101
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR [edx], ecx
$LN16@asterisk:
; Line 104
	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN12@asterisk
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 63					; 0000003fH
	je	SHORT $LN14@asterisk
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN12@asterisk
$LN14@asterisk:
; Line 106
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 63					; 0000003fH
	jne	SHORT $LN13@asterisk
; Line 107
	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [edx], ecx
$LN13@asterisk:
; Line 108
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 109
	jmp	SHORT $LN16@asterisk
$LN12@asterisk:
; Line 112
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN11@asterisk
; Line 113
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN12@asterisk
$LN11@asterisk:
; Line 115
	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN10@asterisk
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN10@asterisk
; Line 116
	mov	DWORD PTR _fit$[ebp], 0
	mov	eax, DWORD PTR _fit$[ebp]
	jmp	$LN17@asterisk
$LN10@asterisk:
; Line 117
	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN9@asterisk
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN9@asterisk
; Line 118
	mov	DWORD PTR _fit$[ebp], 1
	mov	eax, DWORD PTR _fit$[ebp]
	jmp	$LN17@asterisk
; Line 119
	jmp	$LN17@asterisk
$LN9@asterisk:
; Line 123
	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?wildcardfit@Wildcard@@SAHPBD0@Z	; Wildcard::wildcardfit
	add	esp, 8
	test	eax, eax
	jne	$LN7@asterisk
$LN6@asterisk:
; Line 127
	mov	ecx, DWORD PTR _test$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _test$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@asterisk:
; Line 132
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _test$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	je	SHORT $LN5@asterisk
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 91					; 0000005bH
	je	SHORT $LN5@asterisk
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@asterisk
; Line 133
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN3@asterisk
$LN5@asterisk:
; Line 137
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@asterisk
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?wildcardfit@Wildcard@@SAHPBD0@Z	; Wildcard::wildcardfit
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN20@asterisk
$LN19@asterisk:
	mov	DWORD PTR _fit$[ebp], 0
	xor	eax, eax
	cmp	DWORD PTR _fit$[ebp], 0
	setne	al
	mov	DWORD PTR tv154[ebp], eax
$LN20@asterisk:
	cmp	DWORD PTR tv154[ebp], 0
	jne	$LN6@asterisk
$LN7@asterisk:
; Line 139
	mov	ecx, DWORD PTR _test$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN1@asterisk
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN1@asterisk
; Line 140
	mov	DWORD PTR _fit$[ebp], 1
$LN1@asterisk:
; Line 141
	mov	eax, DWORD PTR _fit$[ebp]
$LN17@asterisk:
; Line 143
	mov	esp, ebp
	pop	ebp
	ret	0
?asterisk@Wildcard@@CAHPAPBD0@Z ENDP			; Wildcard::asterisk
_TEXT	ENDS
END
