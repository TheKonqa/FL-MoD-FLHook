; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\Max\Bastelstube\GitHub\FL-MoD-FLHook\plugins\playercntl_plugin\src\CrashCatcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
_BSS	SEGMENT
_bPatchInstalled DB 01H DUP (?)
	ALIGN	4

_fpOldTimingSeconds DD 01H DUP (?)
_fpOldGetRootProc DD 01H DUP (?)
_fpCrashProc1b221Old DD 01H DUP (?)
_fpCrashProc1b113470Old DD 01H DUP (?)
_dwSavedECX DD	01H DUP (?)
_fpCrashProc6F8B330Old DD 01H DUP (?)
_fpCrashProc6F78DD0Old DD 01H DUP (?)
_fpCrashProc6F671A0Old DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG63979
_DATA	ENDS
CONST	SEGMENT
$SG63979 DB	'bad allocation', 00H
	ORG $+1
$SG139186 DB	'ERROR: Crash suppression in GetRoot(child=%08x)', 00H
$SG139188 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, 'C', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'h', 00H, ' '
	DB	00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'R', 00H
	DB	'o', 00H, 'o', 00H, 't', 00H, '(', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'l', 00H, 'd', 00H, '=', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'x', 00H, ')', 00H, 0aH, 00H, 00H, 00H
	ORG $+6
$SG139198 DB	'ERROR: Crash suppression in pub::System::EnumerateConnec'
	DB	'tions(system=%08x,type=%d)', 00H
	ORG $+1
$SG139199 DB	'HkCb_CrashProc1b221', 00H
$SG139200 DB	'ERROR Exception in %s', 00H
	ORG $+2
$SG139215 DB	'H', 00H, 'k', 00H, 'C', 00H, 'b', 00H, '_', 00H, 'C', 00H
	DB	'r', 00H, 'a', 00H, 's', 00H, 'h', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'c', 00H, '6', 00H, 'F', 00H, '8', 00H, 'B', 00H, '3', 00H
	DB	'3', 00H, '0', 00H, '(', 00H, 'a', 00H, 'r', 00H, 'g', 00H, '1'
	DB	00H, '=', 00H, '%', 00H, '0', 00H, '8', 00H, 'x', 00H, ')', 00H
	DB	0aH, 00H, 00H, 00H
$SG139216 DB	'HkCb_CrashProc6F8B330', 00H
	ORG $+2
$SG139217 DB	'ERROR Exception in %s', 00H
	ORG $+6
$SG139228 DB	'H', 00H, 'k', 00H, 'C', 00H, 'b', 00H, '_', 00H, 'C', 00H
	DB	'r', 00H, 'a', 00H, 's', 00H, 'h', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'c', 00H, '6', 00H, 'F', 00H, '7', 00H, '8', 00H, 'D', 00H
	DB	'D', 00H, '0', 00H, '(', 00H, 'a', 00H, 'r', 00H, 'g', 00H, '1'
	DB	00H, '=', 00H, '%', 00H, '0', 00H, '8', 00H, 'x', 00H, ',', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, '2', 00H, '=', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'x', 00H, ')', 00H, 0aH, 00H, 00H, 00H
$SG139229 DB	'HkCb_CrashProc6F78DD0', 00H
	ORG $+2
$SG139230 DB	'ERROR Exception in %s', 00H
	ORG $+2
$SG139240 DB	'H', 00H, 'k', 00H, 'C', 00H, 'b', 00H, '_', 00H, 'C', 00H
	DB	'r', 00H, 'a', 00H, 's', 00H, 'h', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'c', 00H, '6', 00H, 'F', 00H, '6', 00H, '7', 00H, '1', 00H
	DB	'A', 00H, '0', 00H, '(', 00H, 'a', 00H, 'r', 00H, 'g', 00H, '1'
	DB	00H, '=', 00H, '%', 00H, '0', 00H, '8', 00H, 'x', 00H, ')', 00H
	DB	0aH, 00H, 00H, 00H
$SG139241 DB	'HkCb_CrashProc6F671A0', 00H
	ORG $+2
$SG139242 DB	'ERROR Exception in %s', 00H
	ORG $+2
$SG139263 DB	'ERROR: Exception/Crash suppression engbase.dll:0x124BD', 00H
	ORG $+1
$SG139264 DB	'Cmp=%s Part=%s', 00H
	ORG $+1
$SG139272 DB	'ERROR: Exception/Crash suppression engbase.dll:0x11A6D', 00H
	ORG $+5
$SG139277 DB	'ERROR: Exception/Crash in content.dll:0x47bc4 - probably'
	DB	' missing formation in faction_props.ini/formations.ini - exit'
	DB	'ing', 00H
	ORG $+7
$SG139291 DB	'ERROR: Exception/Crash suppression content.dll:0xC608D(z'
	DB	'one=%08x)', 00H
	ORG $+2
$SG139292 DB	'HkCb_C4800Hook', 00H
	ORG $+1
$SG139293 DB	'ERROR Exception in %s', 00H
	ORG $+2
$SG139300 DB	'ERROR: Time delta invalid seconds=%f ticks_delta=%I64i', 00H
	ORG $+5
$SG139302 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'd'
	DB	00H, 'e', 00H, 'l', 00H, 't', 00H, 'a', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 's', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H
	DB	's', 00H, '=', 00H, '%', 00H, 'f', 00H, ' ', 00H, 't', 00H, 'i'
	DB	00H, 'c', 00H, 'k', 00H, 's', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'l', 00H, 't', 00H, 'a', 00H, '=', 00H, '%', 00H, 'I', 00H, '6'
	DB	00H, '4', 00H, 'i', 00H, 0aH, 00H, 00H, 00H
$SG139305 DB	'ERROR: Time lag detected seconds=%f ticks_delta=%I64i', 00H
	ORG $+2
$SG139307 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H, 's', 00H
	DB	'=', 00H, '%', 00H, 'f', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'c'
	DB	00H, 'k', 00H, 's', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'l', 00H
	DB	't', 00H, 'a', 00H, '=', 00H, '%', 00H, 'I', 00H, '6', 00H, '4'
	DB	00H, 'i', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG139312 DB	'server.dll', 00H
	ORG $+1
$SG139324 DB	'engbase.dll', 00H
$SG139325 DB	'content.dll', 00H
	ORG $+4
$SG139329 DB	'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG139378 DB	'CrashCatcher::Init', 00H
	ORG $+1
$SG139379 DB	'ERROR Exception in %s', 00H
	ORG $+2
$SG139389 DB	'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	':', 00H, ' ', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H
	DB	0aH, 00H, 00H, 00H
CONST	ENDS
PUBLIC	?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z		; HkCb_GetRoot
EXTRN	__imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ:PROC
EXTRN	__imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ:PROC
EXTRN	__imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z:PROC
EXTRN	__imp_?AddLog@@YAXPBDZZ:PROC
EXTRN	__imp_?GetRoot@@YAPAUCObject@@PBU1@@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__catchsym$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$0
__tryblocktable$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z DD 00H
	DD	00H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$3
__unwindtable$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$2
__ehfuncinfo$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv85 = -32						; size = 4
tv87 = -28						; size = 4
$T143594 = -24						; size = 4
$T143593 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_child$ = 8						; size = 4
?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z PROC		; HkCb_GetRoot
; File g:\max\bastelstube\github\fl-mod-flhook\plugins\playercntl_plugin\src\crashcatcher.cpp
; Line 30
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 32
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 33
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	call	DWORD PTR __imp_?GetRoot@@YAPAUCObject@@PBU1@@Z
	add	esp, 4
	jmp	SHORT $LN2@HkCb_GetRo
__catch$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$0:
; Line 37
	mov	ecx, DWORD PTR _child$[ebp]
	push	ecx
	push	OFFSET $SG139186
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
; Line 38
	mov	edx, DWORD PTR _child$[ebp]
	push	edx
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143593[ebp], esp
	push	OFFSET $SG139188
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv87[ebp], eax
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 39
	mov	ecx, DWORD PTR _child$[ebp]
	mov	DWORD PTR $T143594[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN8@HkCb_GetRo
	ret	0
; Line 40
	mov	eax, __tryend$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$1
	ret	0
__tryend$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@HkCb_GetRo
$LN8@HkCb_GetRo:
; Line 39
	mov	eax, DWORD PTR $T143594[ebp]
$LN2@HkCb_GetRo:
; Line 41
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z$2:
	mov	ecx, DWORD PTR $T143593[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z ENDP		; HkCb_GetRoot
PUBLIC	?HkCb_CrashProc1b221@@YAHABIAAUConnectionEnumerator@System@pub@@H@Z ; HkCb_CrashProc1b221
EXTRN	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z:PROC ; AddExceptionInfoLog
EXTRN	__imp_?EnumerateConnections@System@pub@@YAHABIAAUConnectionEnumerator@12@W4ConnectionType@@@Z:PROC
EXTRN	__except_handler4:PROC
xdata$x	SEGMENT
__sehtable$?HkCb_CrashProc1b221@@YAHABIAAUConnectionEnumerator@System@pub@@H@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@HkCb_Crash
	DD	FLAT:$LN6@HkCb_Crash
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv78 = -32						; size = 4
tv75 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_system$ = 8						; size = 4
_conn$ = 12						; size = 4
_type$ = 16						; size = 4
?HkCb_CrashProc1b221@@YAHABIAAUConnectionEnumerator@System@pub@@H@Z PROC ; HkCb_CrashProc1b221
; Line 46
	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$?HkCb_CrashProc1b221@@YAHABIAAUConnectionEnumerator@System@pub@@H@Z
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -16				; fffffff0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
; Line 47
	mov	DWORD PTR __$SEHRec$[ebp+20], 0
; Line 49
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _system$[ebp]
	push	edx
	call	DWORD PTR __imp_?EnumerateConnections@System@pub@@YAHABIAAUConnectionEnumerator@12@W4ConnectionType@@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv75[ebp], eax
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv75[ebp]
	jmp	SHORT $LN4@HkCb_Crash
; Line 50
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	jmp	SHORT $LN4@HkCb_Crash
$LN5@HkCb_Crash:
$LN10@HkCb_Crash:
; Line 51
	mov	eax, 1
$LN7@HkCb_Crash:
$LN9@HkCb_Crash:
	ret	0
$LN6@HkCb_Crash:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
; Line 53
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _system$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG139198
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 12					; 0000000cH
; Line 54
	push	OFFSET $SG139199
	push	OFFSET $SG139200
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	push	0
	call	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z ; AddExceptionInfoLog
	add	esp, 4
; Line 55
	mov	DWORD PTR tv78[ebp], -2			; fffffffeH
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv78[ebp]
	jmp	SHORT $LN4@HkCb_Crash
; Line 56
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
$LN4@HkCb_Crash:
; Line 57
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HkCb_CrashProc1b221@@YAHABIAAUConnectionEnumerator@System@pub@@H@Z ENDP ; HkCb_CrashProc1b221
_TEXT	ENDS
PUBLIC	?HkCb_PubZoneSystem@@YAII@Z			; HkCb_PubZoneSystem
EXTRN	__imp_?GetSystem@Zone@pub@@YAII@Z:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_res$ = -4						; size = 4
_system$ = 8						; size = 4
?HkCb_PubZoneSystem@@YAII@Z PROC			; HkCb_PubZoneSystem
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 62
	mov	eax, DWORD PTR _system$[ebp]
	push	eax
	call	DWORD PTR __imp_?GetSystem@Zone@pub@@YAII@Z
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax
; Line 64
	mov	eax, DWORD PTR _res$[ebp]
; Line 65
	mov	esp, ebp
	pop	ebp
	ret	0
?HkCb_PubZoneSystem@@YAII@Z ENDP			; HkCb_PubZoneSystem
_TEXT	ENDS
PUBLIC	?HkCb_CrashProc6F8B330@@YGDH@Z			; HkCb_CrashProc6F8B330
EXTRN	?set_iPluginDebug@@3HA:DWORD			; set_iPluginDebug
xdata$x	SEGMENT
__catchsym$?HkCb_CrashProc6F8B330@@YGDH@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?HkCb_CrashProc6F8B330@@YGDH@Z$0
__tryblocktable$?HkCb_CrashProc6F8B330@@YGDH@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?HkCb_CrashProc6F8B330@@YGDH@Z$3
__unwindtable$?HkCb_CrashProc6F8B330@@YGDH@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?HkCb_CrashProc6F8B330@@YGDH@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?HkCb_CrashProc6F8B330@@YGDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?HkCb_CrashProc6F8B330@@YGDH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?HkCb_CrashProc6F8B330@@YGDH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv85 = -32						; size = 4
tv87 = -28						; size = 4
$T143625 = -24						; size = 4
_res$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_arg1$ = 8						; size = 4
?HkCb_CrashProc6F8B330@@YGDH@Z PROC			; HkCb_CrashProc6F8B330
; Line 71
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HkCb_CrashProc6F8B330@@YGDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 72
	mov	DWORD PTR _res$[ebp], 0
; Line 74
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 75
	cmp	DWORD PTR ?set_iPluginDebug@@3HA, 2	; set_iPluginDebug
	jle	SHORT $LN1@HkCb_Crash@2
; Line 76
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143625[ebp], esp
	push	OFFSET $SG139215
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
$LN1@HkCb_Crash@2:
; Line 79
	pushad
; Line 80
	push	DWORD PTR _arg1$[ebp]
; Line 81
	mov	ecx, DWORD PTR _dwSavedECX
; Line 82
	call	DWORD PTR _fpCrashProc6F8B330Old
; Line 83
	mov	DWORD PTR _res$[ebp], eax
; Line 84
	popad
; Line 86
	jmp	SHORT $LN5@HkCb_Crash@2
__catch$?HkCb_CrashProc6F8B330@@YGDH@Z$0:
; Line 89
	push	OFFSET $SG139216
	push	OFFSET $SG139217
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	push	0
	call	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z ; AddExceptionInfoLog
	add	esp, 4
; Line 90
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?HkCb_CrashProc6F8B330@@YGDH@Z$1
	ret	0
$LN5@HkCb_Crash@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?HkCb_CrashProc6F8B330@@YGDH@Z$1:
; Line 92
	mov	al, BYTE PTR _res$[ebp]
; Line 93
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HkCb_CrashProc6F8B330@@YGDH@Z$2:
	mov	ecx, DWORD PTR $T143625[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?HkCb_CrashProc6F8B330@@YGDH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HkCb_CrashProc6F8B330@@YGDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HkCb_CrashProc6F8B330@@YGDH@Z ENDP			; HkCb_CrashProc6F8B330
PUBLIC	?HkCb_CrashProc6F8B330Naked@@YAXXZ		; HkCb_CrashProc6F8B330Naked
; Function compile flags: /Odtp
_TEXT	SEGMENT
?HkCb_CrashProc6F8B330Naked@@YAXXZ PROC			; HkCb_CrashProc6F8B330Naked
; Line 97
	mov	DWORD PTR _dwSavedECX, ecx
; Line 98
	jmp	?HkCb_CrashProc6F8B330@@YGDH@Z		; HkCb_CrashProc6F8B330
?HkCb_CrashProc6F8B330Naked@@YAXXZ ENDP			; HkCb_CrashProc6F8B330Naked
_TEXT	ENDS
PUBLIC	?HkCb_CrashProc6F78DD0@@YGXHH@Z			; HkCb_CrashProc6F78DD0
xdata$x	SEGMENT
__catchsym$?HkCb_CrashProc6F78DD0@@YGXHH@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?HkCb_CrashProc6F78DD0@@YGXHH@Z$0
__tryblocktable$?HkCb_CrashProc6F78DD0@@YGXHH@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?HkCb_CrashProc6F78DD0@@YGXHH@Z$3
__unwindtable$?HkCb_CrashProc6F78DD0@@YGXHH@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?HkCb_CrashProc6F78DD0@@YGXHH@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?HkCb_CrashProc6F78DD0@@YGXHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?HkCb_CrashProc6F78DD0@@YGXHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?HkCb_CrashProc6F78DD0@@YGXHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv87 = -28						; size = 4
tv89 = -24						; size = 4
$T143640 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_arg1$ = 8						; size = 4
_arg2$ = 12						; size = 4
?HkCb_CrashProc6F78DD0@@YGXHH@Z PROC			; HkCb_CrashProc6F78DD0
; Line 104
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HkCb_CrashProc6F78DD0@@YGXHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 106
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 107
	cmp	DWORD PTR ?set_iPluginDebug@@3HA, 2	; set_iPluginDebug
	jle	SHORT $LN1@HkCb_Crash@3
; Line 108
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143640[ebp], esp
	push	OFFSET $SG139228
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv89[ebp], eax
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv87[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 36					; 00000024H
$LN1@HkCb_Crash@3:
; Line 111
	pushad
; Line 112
	push	DWORD PTR _arg2$[ebp]
; Line 113
	push	DWORD PTR _arg1$[ebp]
; Line 114
	mov	ecx, DWORD PTR _dwSavedECX
; Line 115
	call	DWORD PTR _fpCrashProc6F78DD0Old
; Line 116
	popad
; Line 118
	jmp	SHORT $LN5@HkCb_Crash@3
__catch$?HkCb_CrashProc6F78DD0@@YGXHH@Z$0:
; Line 121
	push	OFFSET $SG139229
	push	OFFSET $SG139230
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	push	0
	call	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z ; AddExceptionInfoLog
	add	esp, 4
; Line 122
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN3@HkCb_Crash@3
	ret	0
$LN5@HkCb_Crash@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@HkCb_Crash@3:
; Line 123
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HkCb_CrashProc6F78DD0@@YGXHH@Z$2:
	mov	ecx, DWORD PTR $T143640[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?HkCb_CrashProc6F78DD0@@YGXHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HkCb_CrashProc6F78DD0@@YGXHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HkCb_CrashProc6F78DD0@@YGXHH@Z ENDP			; HkCb_CrashProc6F78DD0
PUBLIC	?HkCb_CrashProc6F78DD0Naked@@YAXXZ		; HkCb_CrashProc6F78DD0Naked
; Function compile flags: /Odtp
_TEXT	SEGMENT
?HkCb_CrashProc6F78DD0Naked@@YAXXZ PROC			; HkCb_CrashProc6F78DD0Naked
; Line 127
	mov	DWORD PTR _dwSavedECX, ecx
; Line 128
	jmp	?HkCb_CrashProc6F78DD0@@YGXHH@Z		; HkCb_CrashProc6F78DD0
?HkCb_CrashProc6F78DD0Naked@@YAXXZ ENDP			; HkCb_CrashProc6F78DD0Naked
_TEXT	ENDS
PUBLIC	?HkCb_CrashProc6F671A0@@YAXH@Z			; HkCb_CrashProc6F671A0
xdata$x	SEGMENT
__catchsym$?HkCb_CrashProc6F671A0@@YAXH@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?HkCb_CrashProc6F671A0@@YAXH@Z$0
__tryblocktable$?HkCb_CrashProc6F671A0@@YAXH@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?HkCb_CrashProc6F671A0@@YAXH@Z$3
__unwindtable$?HkCb_CrashProc6F671A0@@YAXH@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?HkCb_CrashProc6F671A0@@YAXH@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?HkCb_CrashProc6F671A0@@YAXH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?HkCb_CrashProc6F671A0@@YAXH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?HkCb_CrashProc6F671A0@@YAXH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv85 = -28						; size = 4
tv87 = -24						; size = 4
$T143655 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_arg1$ = 8						; size = 4
?HkCb_CrashProc6F671A0@@YAXH@Z PROC			; HkCb_CrashProc6F671A0
; Line 133
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HkCb_CrashProc6F671A0@@YAXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 135
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 136
	cmp	DWORD PTR ?set_iPluginDebug@@3HA, 2	; set_iPluginDebug
	jle	SHORT $LN1@HkCb_Crash@4
; Line 137
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143655[ebp], esp
	push	OFFSET $SG139240
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
$LN1@HkCb_Crash@4:
; Line 140
	pushad
; Line 141
	push	DWORD PTR _arg1$[ebp]
; Line 142
	call	DWORD PTR _fpCrashProc6F671A0Old
; Line 143
	add	esp, 4
; Line 144
	popad
; Line 146
	jmp	SHORT $LN5@HkCb_Crash@4
__catch$?HkCb_CrashProc6F671A0@@YAXH@Z$0:
; Line 149
	push	OFFSET $SG139241
	push	OFFSET $SG139242
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	push	0
	call	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z ; AddExceptionInfoLog
	add	esp, 4
; Line 150
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN3@HkCb_Crash@4
	ret	0
$LN5@HkCb_Crash@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@HkCb_Crash@4:
; Line 151
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HkCb_CrashProc6F671A0@@YAXH@Z$2:
	mov	ecx, DWORD PTR $T143655[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?HkCb_CrashProc6F671A0@@YAXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HkCb_CrashProc6F671A0@@YAXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HkCb_CrashProc6F671A0@@YAXH@Z ENDP			; HkCb_CrashProc6F671A0
PUBLIC	?EngBase124BD_Log@@YGPBEPBE@Z			; EngBase124BD_Log
EXTRN	__imp__strncpy:PROC
_BSS	SEGMENT
_part	DB	0100H DUP (?)
_cmp	DB	0100H DUP (?)
_BSS	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?EngBase124BD_Log@@YGPBEPBE@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN11@EngBase124
	DD	FLAT:$LN12@EngBase124
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_addr$139249 = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_data$ = 8						; size = 4
?EngBase124BD_Log@@YGPBEPBE@Z PROC			; EngBase124BD_Log
; Line 157
	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$?EngBase124BD_Log@@YGPBEPBE@Z
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -12				; fffffff4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
; Line 158
	mov	DWORD PTR __$SEHRec$[ebp+20], 0
; Line 160
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _addr$139249[ebp], ecx
; Line 161
	cmp	DWORD PTR _addr$139249[ebp], 0
	je	SHORT $LN6@EngBase124
; Line 162
	mov	edx, DWORD PTR _addr$139249[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _addr$139249[ebp], eax
$LN6@EngBase124:
; Line 163
	cmp	DWORD PTR _addr$139249[ebp], 0
	je	SHORT $LN5@EngBase124
; Line 165
	push	256					; 00000100H
	mov	ecx, DWORD PTR _addr$139249[ebp]
	push	ecx
	push	OFFSET _cmp
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
; Line 166
	mov	BYTE PTR _cmp+255, 0
; Line 168
	jmp	SHORT $LN4@EngBase124
$LN5@EngBase124:
; Line 170
	mov	BYTE PTR _cmp, 0
$LN4@EngBase124:
; Line 172
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _addr$139249[ebp], eax
; Line 173
	cmp	DWORD PTR _addr$139249[ebp], 0
	je	SHORT $LN3@EngBase124
; Line 174
	mov	ecx, DWORD PTR _addr$139249[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _addr$139249[ebp], edx
$LN3@EngBase124:
; Line 175
	cmp	DWORD PTR _addr$139249[ebp], 0
	je	SHORT $LN2@EngBase124
; Line 177
	push	256					; 00000100H
	mov	eax, DWORD PTR _addr$139249[ebp]
	push	eax
	push	OFFSET _part
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
; Line 178
	mov	BYTE PTR _part+255, 0
; Line 180
	jmp	SHORT $LN1@EngBase124
$LN2@EngBase124:
; Line 182
	mov	BYTE PTR _part, 0
$LN1@EngBase124:
; Line 184
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _data$[ebp], edx
; Line 185
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	jmp	SHORT $LN14@EngBase124
$LN11@EngBase124:
$LN16@EngBase124:
; Line 186
	mov	eax, 1
$LN13@EngBase124:
$LN15@EngBase124:
	ret	0
$LN12@EngBase124:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
; Line 188
	push	OFFSET $SG139263
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 4
; Line 189
	push	OFFSET _part
	push	OFFSET _cmp
	push	OFFSET $SG139264
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 12					; 0000000cH
; Line 190
	mov	DWORD PTR _data$[ebp], 0
; Line 191
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
$LN14@EngBase124:
; Line 193
	mov	eax, DWORD PTR _data$[ebp]
$LN10@EngBase124:
; Line 194
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?EngBase124BD_Log@@YGPBEPBE@Z ENDP			; EngBase124BD_Log
_TEXT	ENDS
PUBLIC	?HkCb_EngBase124BDNaked@@YAXXZ			; HkCb_EngBase124BDNaked
; Function compile flags: /Odtp
_TEXT	SEGMENT
?HkCb_EngBase124BDNaked@@YAXXZ PROC			; HkCb_EngBase124BDNaked
; Line 200
	push	eax
; Line 201
	call	?EngBase124BD_Log@@YGPBEPBE@Z		; EngBase124BD_Log
; Line 202
	test	eax, eax
; Line 203
	ret	0
?HkCb_EngBase124BDNaked@@YAXXZ ENDP			; HkCb_EngBase124BDNaked
_TEXT	ENDS
PUBLIC	?HkCb_EngBase11a6dNaked_Log@@YG?BKPBE@Z		; HkCb_EngBase11a6dNaked_Log
xdata$x	SEGMENT
	ORG $+4
__sehtable$?HkCb_EngBase11a6dNaked_Log@@YG?BKPBE@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@HkCb_EngBa
	DD	FLAT:$LN6@HkCb_EngBa
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv70 = -32						; size = 4
tv67 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_data$ = 8						; size = 4
?HkCb_EngBase11a6dNaked_Log@@YG?BKPBE@Z PROC		; HkCb_EngBase11a6dNaked_Log
; Line 209
	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$?HkCb_EngBase11a6dNaked_Log@@YG?BKPBE@Z
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -16				; fffffff0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
; Line 210
	mov	DWORD PTR __$SEHRec$[ebp+20], 0
; Line 212
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR tv67[ebp], ecx
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@HkCb_EngBa
; Line 213
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	jmp	SHORT $LN4@HkCb_EngBa
$LN5@HkCb_EngBa:
$LN10@HkCb_EngBa:
; Line 214
	mov	eax, 1
$LN7@HkCb_EngBa:
$LN9@HkCb_EngBa:
	ret	0
$LN6@HkCb_EngBa:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
; Line 216
	push	OFFSET $SG139272
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 4
; Line 217
	mov	DWORD PTR tv70[ebp], 0
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv70[ebp]
	jmp	SHORT $LN4@HkCb_EngBa
; Line 218
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
$LN4@HkCb_EngBa:
; Line 219
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?HkCb_EngBase11a6dNaked_Log@@YG?BKPBE@Z ENDP		; HkCb_EngBase11a6dNaked_Log
_TEXT	ENDS
PUBLIC	?HkCb_EngBase11a6dNaked@@YAXXZ			; HkCb_EngBase11a6dNaked
; Function compile flags: /Odtp
_TEXT	SEGMENT
?HkCb_EngBase11a6dNaked@@YAXXZ PROC			; HkCb_EngBase11a6dNaked
; Line 225
	push	eax
; Line 226
	call	?HkCb_EngBase11a6dNaked_Log@@YG?BKPBE@Z	; HkCb_EngBase11a6dNaked_Log
; Line 227
	ret	8
?HkCb_EngBase11a6dNaked@@YAXXZ ENDP			; HkCb_EngBase11a6dNaked
_TEXT	ENDS
PUBLIC	?HkCb_47bc4Naked_Log@@YGXXZ			; HkCb_47bc4Naked_Log
EXTRN	__imp__exit:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
?HkCb_47bc4Naked_Log@@YGXXZ PROC			; HkCb_47bc4Naked_Log
; Line 232
	push	ebp
	mov	ebp, esp
; Line 233
	push	OFFSET $SG139277
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 4
; Line 234
	push	-1
	call	DWORD PTR __imp__exit
$LN2@HkCb_47bc4:
; Line 235
	pop	ebp
	ret	0
?HkCb_47bc4Naked_Log@@YGXXZ ENDP			; HkCb_47bc4Naked_Log
_TEXT	ENDS
PUBLIC	?HkCb_47bc4Naked@@YAXXZ				; HkCb_47bc4Naked
; Function compile flags: /Odtp
_TEXT	SEGMENT
?HkCb_47bc4Naked@@YAXXZ PROC				; HkCb_47bc4Naked
; Line 241
	test	eax, eax
; Line 242
	je	SHORT $will_crash$139280
; Line 243
	mov	edi, eax
; Line 244
	mov	edx, DWORD PTR [edi]
; Line 245
	mov	ecx, edi
; Line 246
	ret	0
$will_crash$139280:
; Line 248
	call	?HkCb_47bc4Naked_Log@@YGXXZ		; HkCb_47bc4Naked_Log
; Line 249
	xor	ecx, ecx
; Line 250
	ret	0
?HkCb_47bc4Naked@@YAXXZ ENDP				; HkCb_47bc4Naked
_TEXT	ENDS
PUBLIC	?HkCb_C4800Hook@@YAHPAH00PANHH@Z		; HkCb_C4800Hook
_BSS	SEGMENT
_hModContentAC DD 01H DUP (?)
_BSS	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?HkCb_C4800Hook@@YAHPAH00PANHH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN7@HkCb_C4800
	DD	FLAT:$LN8@HkCb_C4800
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -40						; size = 4
tv65 = -36						; size = 4
tv72 = -32						; size = 4
_res$139290 = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_a1$ = 8						; size = 4
_a2$ = 12						; size = 4
_zone$ = 16						; size = 4
_a4$ = 20						; size = 4
_a5$ = 24						; size = 4
_a6$ = 28						; size = 4
?HkCb_C4800Hook@@YAHPAH00PANHH@Z PROC			; HkCb_C4800Hook
; Line 255
	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$?HkCb_C4800Hook@@YAHPAH00PANHH@Z
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -24				; ffffffe8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
; Line 256
	mov	DWORD PTR __$SEHRec$[ebp+20], 0
; Line 262
	pushad
; Line 263
	push	DWORD PTR _a6$[ebp]
; Line 264
	push	DWORD PTR _a5$[ebp]
; Line 265
	push	DWORD PTR _a4$[ebp]
; Line 266
	push	DWORD PTR _zone$[ebp]
; Line 267
	push	DWORD PTR _a2$[ebp]
; Line 268
	push	DWORD PTR _a1$[ebp]
; Line 269
	mov	eax, DWORD PTR _hModContentAC
; Line 270
	add	eax, 804864				; 000c4800H
; Line 271
	call	eax
; Line 272
	add	esp, 24					; 00000018H
; Line 273
	mov	DWORD PTR _res$139290[ebp], eax
; Line 274
	popad
; Line 277
	mov	eax, DWORD PTR _res$139290[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv72[ebp]
	jmp	SHORT $LN6@HkCb_C4800
; Line 278
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	jmp	SHORT $LN6@HkCb_C4800
$LN7@HkCb_C4800:
$LN12@HkCb_C4800:
; Line 279
	mov	eax, 1
$LN9@HkCb_C4800:
$LN11@HkCb_C4800:
	ret	0
$LN8@HkCb_C4800:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
; Line 281
	cmp	DWORD PTR _zone$[ebp], 0
	je	SHORT $LN4@HkCb_C4800
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv65[ebp], edx
	jmp	SHORT $LN5@HkCb_C4800
$LN4@HkCb_C4800:
	mov	DWORD PTR tv65[ebp], 0
$LN5@HkCb_C4800:
	mov	eax, DWORD PTR tv65[ebp]
	push	eax
	push	OFFSET $SG139291
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
; Line 282
	push	OFFSET $SG139292
	push	OFFSET $SG139293
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	push	0
	call	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z ; AddExceptionInfoLog
	add	esp, 4
; Line 283
	mov	DWORD PTR tv75[ebp], 0
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv75[ebp]
	jmp	SHORT $LN6@HkCb_C4800
; Line 284
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
$LN6@HkCb_C4800:
; Line 285
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HkCb_C4800Hook@@YAHPAH00PANHH@Z ENDP			; HkCb_C4800Hook
_TEXT	ENDS
PUBLIC	__real@45cb2000
PUBLIC	__real@4c212bc4
PUBLIC	?Init@CrashCatcher@@YAXXZ			; CrashCatcher::Init
EXTRN	__imp_?PatchCallAddr@@YAP6GHXZPADK0@Z:PROC
EXTRN	__imp_?ReadProcMem@@YAXPAX0H@Z:PROC
EXTRN	__imp_?WriteProcMem@@YAXPAX0H@Z:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_hEngBase DD	01H DUP (?)
_hModServerAC DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@45cb2000
CONST	SEGMENT
__real@45cb2000 DD 045cb2000r			; 6500
CONST	ENDS
;	COMDAT __real@4c212bc4
CONST	SEGMENT
__real@4c212bc4 DD 04c212bc4r			; 4.225e+007
CONST	ENDS
xdata$x	SEGMENT
__catchsym$?Init@CrashCatcher@@YAXXZ$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Init@CrashCatcher@@YAXXZ$0
__tryblocktable$?Init@CrashCatcher@@YAXXZ DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Init@CrashCatcher@@YAXXZ$3
__unwindtable$?Init@CrashCatcher@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CrashCatcher@@YAXXZ$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?Init@CrashCatcher@@YAXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Init@CrashCatcher@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Init@CrashCatcher@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv235 = -64						; size = 4
tv237 = -60						; size = 4
$T143705 = -56						; size = 4
_patch$139342 = -52					; size = 2
_patch$139338 = -45					; size = 1
_patch$139334 = -44					; size = 2
_patch$139332 = -40					; size = 4
_fpHook$139346 = -36					; size = 4
_fDistance$139375 = -32					; size = 4
_fpHook$139316 = -28					; size = 4
_fDistance$139314 = -24					; size = 4
_fpTimingSeconds$139320 = -20				; size = 4
__$EHRec$ = -16						; size = 16
?Init@CrashCatcher@@YAXXZ PROC				; CrashCatcher::Init
; Line 306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@CrashCatcher@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 308
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	fwait
; Line 309
	movzx	eax, BYTE PTR _bPatchInstalled
	test	eax, eax
	jne	$LN2@Init
; Line 311
	mov	BYTE PTR _bPatchInstalled, 1
; Line 313
	push	OFFSET $SG139312
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR _hModServerAC, eax
; Line 314
	cmp	DWORD PTR _hModServerAC, 0
	je	SHORT $LN3@Init
; Line 317
	fld	DWORD PTR __real@4c212bc4
	fstp	DWORD PTR _fDistance$139314[ebp]
; Line 318
	push	4
	lea	ecx, DWORD PTR _fDistance$139314[ebp]
	push	ecx
	mov	edx, DWORD PTR _hModServerAC
	add	edx, 551660				; 00086aecH
	push	edx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 320
	mov	DWORD PTR _fpHook$139316[ebp], OFFSET ?HkCb_GetRoot@@YAPAUCObject@@PAU1@@Z ; HkCb_GetRoot
; Line 321
	push	4
	push	OFFSET _fpOldGetRootProc
	mov	eax, DWORD PTR _hModServerAC
	add	eax, 540696				; 00084018H
	push	eax
	call	DWORD PTR __imp_?ReadProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 322
	push	4
	lea	ecx, DWORD PTR _fpHook$139316[ebp]
	push	ecx
	mov	edx, DWORD PTR _hModServerAC
	add	edx, 540696				; 00084018H
	push	edx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
$LN3@Init:
; Line 327
	mov	DWORD PTR _fpTimingSeconds$139320[ebp], OFFSET ?HkCb_TimingSeconds@@YANAA_J@Z ; HkCb_TimingSeconds
; Line 328
	push	4
	push	OFFSET _fpOldTimingSeconds
	push	0
	call	DWORD PTR __imp__GetModuleHandleA@4
	add	eax, 110752				; 0001b0a0H
	push	eax
	call	DWORD PTR __imp_?ReadProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 329
	push	4
	lea	eax, DWORD PTR _fpTimingSeconds$139320[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetModuleHandleA@4
	add	eax, 110752				; 0001b0a0H
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 331
	push	OFFSET $SG139324
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR _hEngBase, eax
; Line 332
	push	OFFSET $SG139325
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR _hModContentAC, eax
; Line 333
	cmp	DWORD PTR _hModContentAC, 0
	je	$LN2@Init
; Line 335
	cmp	DWORD PTR ?set_iPluginDebug@@3HA, 0	; set_iPluginDebug
	je	SHORT $LN1@Init
; Line 336
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143705[ebp], esp
	push	OFFSET $SG139329
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv237[ebp], eax
	mov	ecx, DWORD PTR tv237[ebp]
	mov	DWORD PTR tv235[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 28					; 0000001cH
$LN1@Init:
; Line 340
	push	OFFSET ?HkCb_C4800Hook@@YAHPAH00PANHH@Z	; HkCb_C4800Hook
	push	811149					; 000c608dH
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 352
	mov	BYTE PTR _patch$139332[ebp], 116	; 00000074H
	mov	BYTE PTR _patch$139332[ebp+1], 17	; 00000011H
	mov	BYTE PTR _patch$139332[ebp+2], 235	; 000000ebH
	mov	BYTE PTR _patch$139332[ebp+3], 5
; Line 353
	push	4
	lea	eax, DWORD PTR _patch$139332[ebp]
	push	eax
	mov	ecx, DWORD PTR _hModContentAC
	add	ecx, 804223				; 000c457fH
	push	ecx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 361
	mov	BYTE PTR _patch$139334[ebp], 144	; 00000090H
	mov	BYTE PTR _patch$139334[ebp+1], 232	; 000000e8H
; Line 362
	push	2
	lea	edx, DWORD PTR _patch$139334[ebp]
	push	edx
	mov	eax, DWORD PTR _hModContentAC
	add	eax, 293826				; 00047bc2H
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 363
	push	OFFSET ?HkCb_47bc4Naked@@YAXXZ		; HkCb_47bc4Naked
	push	293827					; 00047bc3H
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 369
	mov	BYTE PTR _patch$139338[ebp], 232	; 000000e8H
; Line 370
	push	1
	lea	edx, DWORD PTR _patch$139338[ebp]
	push	edx
	mov	eax, DWORD PTR _hEngBase
	add	eax, 74941				; 000124bdH
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 371
	push	OFFSET ?HkCb_EngBase124BDNaked@@YAXXZ	; HkCb_EngBase124BDNaked
	push	74941					; 000124bdH
	mov	ecx, DWORD PTR _hEngBase
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 377
	mov	BYTE PTR _patch$139342[ebp], 144	; 00000090H
	mov	BYTE PTR _patch$139342[ebp+1], 233	; 000000e9H
; Line 378
	push	2
	lea	edx, DWORD PTR _patch$139342[ebp]
	push	edx
	mov	eax, DWORD PTR _hEngBase
	add	eax, 72301				; 00011a6dH
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 379
	push	OFFSET ?HkCb_EngBase11a6dNaked@@YAXXZ	; HkCb_EngBase11a6dNaked
	push	72302					; 00011a6eH
	mov	ecx, DWORD PTR _hEngBase
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 397
	mov	DWORD PTR _fpHook$139346[ebp], OFFSET ?HkCb_CrashProc6F8B330Naked@@YAXXZ ; HkCb_CrashProc6F8B330Naked
; Line 398
	push	4
	push	OFFSET _fpCrashProc6F8B330Old
	mov	edx, DWORD PTR _hModContentAC
	add	edx, 1165680				; 0011c970H
	push	edx
	call	DWORD PTR __imp_?ReadProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 399
	push	4
	lea	eax, DWORD PTR _fpHook$139346[ebp]
	push	eax
	mov	ecx, DWORD PTR _hModContentAC
	add	ecx, 1165680				; 0011c970H
	push	ecx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 400
	push	4
	lea	edx, DWORD PTR _fpHook$139346[ebp]
	push	edx
	mov	eax, DWORD PTR _hModContentAC
	add	eax, 1165824				; 0011ca00H
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 403
	push	OFFSET ?HkCb_CrashProc6F78DD0Naked@@YAXXZ ; HkCb_CrashProc6F78DD0Naked
	push	388427					; 0005ed4bH
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fpCrashProc6F78DD0Old, eax
; Line 404
	push	OFFSET ?HkCb_CrashProc6F78DD0Naked@@YAXXZ ; HkCb_CrashProc6F78DD0Naked
	push	776554					; 000bd96aH
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 407
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	777344					; 000bdc80H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fpCrashProc6F671A0Old, eax
; Line 408
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	777465					; 000bdcf9H
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 409
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	779292					; 000be41cH
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 410
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	813026					; 000c67e2H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 411
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	813733					; 000c6aa5H
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 412
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	814056					; 000c6be8H
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 413
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	814961					; 000c6f71H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 414
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	815146					; 000c702aH
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 415
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	815419					; 000c713bH
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 416
	push	OFFSET ?HkCb_CrashProc6F671A0@@YAXH@Z	; HkCb_CrashProc6F671A0
	push	815488					; 000c7180H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 419
	fld	DWORD PTR __real@45cb2000
	fstp	DWORD PTR _fDistance$139375[ebp]
; Line 420
	push	4
	lea	ecx, DWORD PTR _fDistance$139375[ebp]
	push	ecx
	mov	edx, DWORD PTR _hModContentAC
	add	edx, 867694				; 000d3d6eH
	push	edx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 421
	push	4
	lea	eax, DWORD PTR _fDistance$139375[ebp]
	push	eax
	mov	ecx, DWORD PTR _hModContentAC
	add	ecx, 364358				; 00058f46H
	push	ecx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
$LN2@Init:
; Line 425
	fwait
; Line 424
	jmp	SHORT $LN8@Init
__catch$?Init@CrashCatcher@@YAXXZ$0:
; Line 427
	push	OFFSET $SG139378
	push	OFFSET $SG139379
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	push	0
	call	?AddExceptionInfoLog@@YAXPAU_EXCEPTION_POINTERS@@@Z ; AddExceptionInfoLog
	add	esp, 4
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN12@Init
	ret	0
$LN8@Init:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN12@Init:
; Line 429
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@CrashCatcher@@YAXXZ$2:
	mov	ecx, DWORD PTR $T143705[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?Init@CrashCatcher@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@CrashCatcher@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@CrashCatcher@@YAXXZ ENDP				; CrashCatcher::Init
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@0000000000000000
EXTRN	__imp_?seconds@Timing@@YANAB_J@Z:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?HkCb_TimingSeconds@@YANAA_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HkCb_TimingSeconds@@YANAA_J@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?HkCb_TimingSeconds@@YANAA_J@Z$1
__ehfuncinfo$?HkCb_TimingSeconds@@YANAA_J@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?HkCb_TimingSeconds@@YANAA_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv148 = -44						; size = 4
tv150 = -40						; size = 4
tv144 = -36						; size = 4
tv149 = -32						; size = 4
$T143725 = -28						; size = 4
$T143724 = -24						; size = 4
_seconds$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_ticks_delta$ = 8					; size = 4
?HkCb_TimingSeconds@@YANAA_J@Z PROC			; HkCb_TimingSeconds
; Line 288
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HkCb_TimingSeconds@@YANAA_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 289
	mov	eax, DWORD PTR _ticks_delta$[ebp]
	push	eax
	call	DWORD PTR __imp_?seconds@Timing@@YANAB_J@Z
	add	esp, 4
	fstp	QWORD PTR _seconds$[ebp]
; Line 290
	fldz
	fcomp	QWORD PTR _seconds$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN3@HkCb_Timin
	fld	QWORD PTR __real@4024000000000000
	fcomp	QWORD PTR _seconds$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN4@HkCb_Timin
$LN3@HkCb_Timin:
; Line 292
	mov	ecx, DWORD PTR _ticks_delta$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _seconds$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET $SG139300
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 20					; 00000014H
; Line 293
	mov	ecx, DWORD PTR _ticks_delta$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _seconds$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143724[ebp], esp
	push	OFFSET $SG139302
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 44					; 0000002cH
; Line 294
	mov	edx, DWORD PTR _ticks_delta$[ebp]
	mov	DWORD PTR [edx], 1000000		; 000f4240H
	mov	DWORD PTR [edx+4], 0
; Line 295
	mov	eax, DWORD PTR _ticks_delta$[ebp]
	push	eax
	call	DWORD PTR __imp_?seconds@Timing@@YANAB_J@Z
	add	esp, 4
	fstp	QWORD PTR _seconds$[ebp]
	jmp	SHORT $LN1@HkCb_Timin
$LN4@HkCb_Timin:
; Line 297
	fld1
	fcomp	QWORD PTR _seconds$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@HkCb_Timin
; Line 299
	mov	ecx, DWORD PTR _ticks_delta$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _seconds$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET $SG139305
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 20					; 00000014H
; Line 300
	mov	ecx, DWORD PTR _ticks_delta$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _seconds$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143725[ebp], esp
	push	OFFSET $SG139307
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv148[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 44					; 0000002cH
$LN1@HkCb_Timin:
; Line 302
	fld	QWORD PTR _seconds$[ebp]
; Line 303
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HkCb_TimingSeconds@@YANAA_J@Z$0:
	mov	ecx, DWORD PTR $T143724[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?HkCb_TimingSeconds@@YANAA_J@Z$1:
	mov	ecx, DWORD PTR $T143725[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?HkCb_TimingSeconds@@YANAA_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HkCb_TimingSeconds@@YANAA_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HkCb_TimingSeconds@@YANAA_J@Z ENDP			; HkCb_TimingSeconds
PUBLIC	__$ArrayPad$
PUBLIC	?Shutdown@CrashCatcher@@YAXXZ			; CrashCatcher::Shutdown
xdata$x	SEGMENT
__unwindtable$?Shutdown@CrashCatcher@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Shutdown@CrashCatcher@@YAXXZ$0
__ehfuncinfo$?Shutdown@CrashCatcher@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Shutdown@CrashCatcher@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv218 = -60						; size = 4
tv219 = -56						; size = 4
$T143740 = -52						; size = 4
_patch$139396 = -48					; size = 6
_patch$139394 = -40					; size = 5
_patch$139392 = -32					; size = 6
_patch$139390 = -24					; size = 5
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Shutdown@CrashCatcher@@YAXXZ PROC			; CrashCatcher::Shutdown
; Line 432
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Shutdown@CrashCatcher@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 433
	movzx	eax, BYTE PTR _bPatchInstalled
	test	eax, eax
	je	$LN5@Shutdown
; Line 436
	cmp	DWORD PTR _hModServerAC, 0
	je	SHORT $LN3@Shutdown
; Line 438
	push	4
	push	OFFSET _fpOldGetRootProc
	mov	ecx, DWORD PTR _hModServerAC
	add	ecx, 540696				; 00084018H
	push	ecx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
$LN3@Shutdown:
; Line 442
	push	4
	push	OFFSET _fpOldTimingSeconds
	push	0
	call	DWORD PTR __imp__GetModuleHandleA@4
	add	eax, 110752				; 0001b0a0H
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 444
	cmp	DWORD PTR _hModContentAC, 0
	je	$LN5@Shutdown
; Line 446
	cmp	DWORD PTR ?set_iPluginDebug@@3HA, 0	; set_iPluginDebug
	je	SHORT $LN1@Shutdown
; Line 447
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T143740[ebp], esp
	push	OFFSET $SG139389
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv219[ebp], eax
	mov	edx, DWORD PTR tv219[ebp]
	mov	DWORD PTR tv218[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR __imp_?ConPrint@@YAXV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 28					; 0000001cH
$LN1@Shutdown:
; Line 450
	mov	BYTE PTR _patch$139390[ebp], 232	; 000000e8H
	mov	BYTE PTR _patch$139390[ebp+1], 110	; 0000006eH
	mov	BYTE PTR _patch$139390[ebp+2], 231	; 000000e7H
	mov	BYTE PTR _patch$139390[ebp+3], 255	; 000000ffH
	mov	BYTE PTR _patch$139390[ebp+4], 255	; 000000ffH
; Line 451
	push	5
	lea	eax, DWORD PTR _patch$139390[ebp]
	push	eax
	mov	ecx, DWORD PTR _hModContentAC
	add	ecx, 811149				; 000c608dH
	push	ecx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 455
	mov	BYTE PTR _patch$139392[ebp], 139	; 0000008bH
	mov	BYTE PTR _patch$139392[ebp+1], 248	; 000000f8H
	mov	BYTE PTR _patch$139392[ebp+2], 139	; 0000008bH
	mov	BYTE PTR _patch$139392[ebp+3], 23	; 00000017H
	mov	BYTE PTR _patch$139392[ebp+4], 139	; 0000008bH
	mov	BYTE PTR _patch$139392[ebp+5], 207	; 000000cfH
; Line 456
	push	6
	lea	edx, DWORD PTR _patch$139392[ebp]
	push	edx
	mov	eax, DWORD PTR _hModContentAC
	add	eax, 293826				; 00047bc2H
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 460
	mov	BYTE PTR _patch$139394[ebp], 139	; 0000008bH
	mov	BYTE PTR _patch$139394[ebp+1], 64	; 00000040H
	mov	BYTE PTR _patch$139394[ebp+2], 16	; 00000010H
	mov	BYTE PTR _patch$139394[ebp+3], 133	; 00000085H
	mov	BYTE PTR _patch$139394[ebp+4], 192	; 000000c0H
; Line 461
	push	5
	lea	ecx, DWORD PTR _patch$139394[ebp]
	push	ecx
	mov	edx, DWORD PTR _hEngBase
	add	edx, 74941				; 000124bdH
	push	edx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 465
	mov	BYTE PTR _patch$139396[ebp], 139	; 0000008bH
	mov	BYTE PTR _patch$139396[ebp+1], 64	; 00000040H
	mov	BYTE PTR _patch$139396[ebp+2], 40	; 00000028H
	mov	BYTE PTR _patch$139396[ebp+3], 194	; 000000c2H
	mov	BYTE PTR _patch$139396[ebp+4], 8
	mov	BYTE PTR _patch$139396[ebp+5], 0
; Line 466
	push	6
	lea	eax, DWORD PTR _patch$139396[ebp]
	push	eax
	mov	ecx, DWORD PTR _hEngBase
	add	ecx, 72301				; 00011a6dH
	push	ecx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 472
	push	4
	push	OFFSET _fpCrashProc6F8B330Old
	mov	edx, DWORD PTR _hModContentAC
	add	edx, 1165680				; 0011c970H
	push	edx
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 473
	push	4
	push	OFFSET _fpCrashProc6F8B330Old
	mov	eax, DWORD PTR _hModContentAC
	add	eax, 1165824				; 0011ca00H
	push	eax
	call	DWORD PTR __imp_?WriteProcMem@@YAXPAX0H@Z
	add	esp, 12					; 0000000cH
; Line 475
	mov	ecx, DWORD PTR _fpCrashProc6F78DD0Old
	push	ecx
	push	388427					; 0005ed4bH
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 476
	mov	eax, DWORD PTR _fpCrashProc6F78DD0Old
	push	eax
	push	776554					; 000bd96aH
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 478
	mov	edx, DWORD PTR _fpCrashProc6F671A0Old
	push	edx
	push	777344					; 000bdc80H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 479
	mov	ecx, DWORD PTR _fpCrashProc6F671A0Old
	push	ecx
	push	777465					; 000bdcf9H
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 480
	mov	eax, DWORD PTR _fpCrashProc6F671A0Old
	push	eax
	push	779292					; 000be41cH
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 481
	mov	edx, DWORD PTR _fpCrashProc6F671A0Old
	push	edx
	push	813026					; 000c67e2H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 482
	mov	ecx, DWORD PTR _fpCrashProc6F671A0Old
	push	ecx
	push	813733					; 000c6aa5H
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 483
	mov	eax, DWORD PTR _fpCrashProc6F671A0Old
	push	eax
	push	814056					; 000c6be8H
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 484
	mov	edx, DWORD PTR _fpCrashProc6F671A0Old
	push	edx
	push	814961					; 000c6f71H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 485
	mov	ecx, DWORD PTR _fpCrashProc6F671A0Old
	push	ecx
	push	815146					; 000c702aH
	mov	edx, DWORD PTR _hModContentAC
	push	edx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 486
	mov	eax, DWORD PTR _fpCrashProc6F671A0Old
	push	eax
	push	815419					; 000c713bH
	mov	ecx, DWORD PTR _hModContentAC
	push	ecx
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
; Line 487
	mov	edx, DWORD PTR _fpCrashProc6F671A0Old
	push	edx
	push	815488					; 000c7180H
	mov	eax, DWORD PTR _hModContentAC
	push	eax
	call	DWORD PTR __imp_?PatchCallAddr@@YAP6GHXZPADK0@Z
	add	esp, 12					; 0000000cH
$LN5@Shutdown:
; Line 490
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Shutdown@CrashCatcher@@YAXXZ$0:
	mov	ecx, DWORD PTR $T143740[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?Shutdown@CrashCatcher@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Shutdown@CrashCatcher@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Shutdown@CrashCatcher@@YAXXZ ENDP			; CrashCatcher::Shutdown
END
