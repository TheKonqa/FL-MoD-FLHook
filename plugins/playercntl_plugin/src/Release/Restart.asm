; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\Max\Bastelstube\FL\FLHook Source\flhookplugin_MoD\plugins\playercntl_plugin\src\Restart.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG63979
_DATA	ENDS
CONST	SEGMENT
$SG63979 DB	'bad allocation', 00H
$SG141593 DB	00H
$SG140809 DB	'MaxRank', 00H
$SG140810 DB	'Restart', 00H
$SG140813 DB	'MaxCash', 00H
$SG140814 DB	'Restart', 00H
$SG140827 DB	'\flhook_plugins\restart\*.fl', 00H
	ORG $+3
$SG140832 DB	'R', 00H, 'e', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r', 00H
	DB	't', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'f', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
$SG140835 DB	00H, 00H
	ORG $+2
$SG140934 DB	' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG140936 DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'n', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 's'
	DB	00H, ':', 00H, 00H, 00H
$SG140938 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG140940 DB	'O', 00H, 'K', 00H, 00H, 00H
	ORG $+2
$SG141519 DB	'E', 00H, 'R', 00H, 'R', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG141530 DB	'.fl', 00H
$SG141531 DB	'\flhook_plugins\restart\', 00H
	ORG $+3
$SG141538 DB	'.fl', 00H
$SG141539 DB	'\flhook_plugins\restart\_', 00H
	ORG $+2
$SG141542 DB	'E', 00H, 'R', 00H, 'R', 00H, ' ', 00H, 'T', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'd', 00H, 'o', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 00H, 00H
$SG141549 DB	'E', 00H, 'R', 00H, 'R', 00H, ' ', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'b', 00H, 'a'
	DB	00H, 's', 00H, 'e', 00H, 00H, 00H
$SG141586 DB	'.fl', 00H
$SG141555 DB	'E', 00H, 'R', 00H, 'R', 00H, ' ', 00H, 'Y', 00H, 'o', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 'u', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'w', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 't', 00H, '.', 00H, ' ', 00H, 'Y', 00H, 'o', 00H
	DB	'u', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'k'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	'o', 00H, ' ', 00H, 'h', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 00H
	DB	00H
	ORG $+6
$SG141560 DB	'E', 00H, 'R', 00H, 'R', 00H, ' ', 00H, 'Y', 00H, 'o', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 'u', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'w', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 't', 00H, '.', 00H, ' ', 00H, 'Y', 00H, 'o', 00H
	DB	'u', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 's', 00H, 'h'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	'o', 00H, ' ', 00H, 'h', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 00H
	DB	00H
	ORG $+6
$SG141565 DB	'U', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'r', 00H, ',', 00H
	DB	' ', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'w', 00H, 'a', 00H, 'i', 00H, 't', 00H, ' ', 00H
	DB	'1', 00H, '0', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 'd', 00H, 's', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG141587 DB	'\', 00H
	ORG $+2
$SG141594 DB	'description', 00H
$SG141595 DB	'Player', 00H
	ORG $+1
$SG141601 DB	'0', 00H
	ORG $+2
$SG141602 DB	'tstamp', 00H
	ORG $+1
$SG141603 DB	'Player', 00H
	ORG $+1
$SG141612 DB	'copy template', 00H
	ORG $+2
$SG141615 DB	'name', 00H
	ORG $+3
$SG141616 DB	'Player', 00H
	ORG $+1
$SG141619 DB	'description', 00H
$SG141620 DB	'Player', 00H
	ORG $+1
$SG141623 DB	'tstamp', 00H
	ORG $+1
$SG141624 DB	'Player', 00H
	ORG $+1
$SG141627 DB	'NOTICE: User restart %s for %s', 00H
	ORG $+1
$SG141630 DB	'ERROR: User restart failed (%s) for %s', 00H
	ORG $+1
$SG141632 DB	'ERROR: User restart failed for %s', 00H
CONST	ENDS
PUBLIC	?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Restart::LoadSettings
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_?IniGetI@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00H@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_set_iMaxCash DD 01H DUP (?)
_set_iMaxRank DD 01H DUP (?)
_BSS	ENDS
xdata$x	SEGMENT
__unwindtable$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
__ehfuncinfo$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
$T146376 = -124						; size = 28
$T146375 = -96						; size = 28
$T146374 = -68						; size = 28
$T146373 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_scPluginCfgFile$ = 8					; size = 4
?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Restart::LoadSettings
; File g:\max\bastelstube\fl\flhook source\flhookplugin_mod\plugins\playercntl_plugin\src\restart.cpp
; Line 41
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 42
	push	OFFSET $SG140809
	lea	ecx, DWORD PTR $T146373[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET $SG140810
	lea	ecx, DWORD PTR $T146374[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	5
	lea	eax, DWORD PTR $T146373[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146374[ebp]
	push	ecx
	mov	edx, DWORD PTR _scPluginCfgFile$[ebp]
	push	edx
	call	DWORD PTR __imp_?IniGetI@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00H@Z
	add	esp, 16					; 00000010H
	mov	DWORD PTR _set_iMaxRank, eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T146374[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T146373[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 43
	push	OFFSET $SG140813
	lea	ecx, DWORD PTR $T146375[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	push	OFFSET $SG140814
	lea	ecx, DWORD PTR $T146376[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	1000000					; 000f4240H
	lea	eax, DWORD PTR $T146375[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146376[ebp]
	push	ecx
	mov	edx, DWORD PTR _scPluginCfgFile$[ebp]
	push	edx
	call	DWORD PTR __imp_?IniGetI@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00H@Z
	add	esp, 16					; 00000010H
	mov	DWORD PTR _set_iMaxCash, eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T146376[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T146375[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 44
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	lea	ecx, DWORD PTR $T146373[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
	lea	ecx, DWORD PTR $T146374[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
	lea	ecx, DWORD PTR $T146375[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
	lea	ecx, DWORD PTR $T146376[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadSettings@Restart@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Restart::LoadSettings
PUBLIC	__$ArrayPad$
PUBLIC	?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z ; Restart::UserCmd_ShowRestarts
EXTRN	__imp_?c_str@?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QBEPBGXZ:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??Y?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@ABV10@PBG@Z:PROC
EXTRN	__imp_?stows@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC
EXTRN	__imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z:PROC
EXTRN	__imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z:PROC
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
EXTRN	__imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ:PROC
EXTRN	__imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp__GetCurrentDirectoryA@8:PROC
xdata$x	SEGMENT
__ehfuncinfo$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$9
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv232 = -860						; size = 4
tv241 = -856						; size = 4
tv230 = -852						; size = 4
tv239 = -848						; size = 4
tv227 = -844						; size = 4
tv237 = -840						; size = 4
tv225 = -836						; size = 4
tv130 = -832						; size = 4
tv223 = -828						; size = 4
tv134 = -824						; size = 4
tv218 = -820						; size = 4
tv64 = -816						; size = 4
tv215 = -812						; size = 4
tv235 = -808						; size = 4
$T146400 = -801						; size = 1
$T146399 = -800						; size = 4
$T146398 = -796						; size = 4
$T146397 = -792						; size = 4
$T146396 = -788						; size = 28
$T146395 = -760						; size = 28
$T146394 = -729						; size = 1
$T146393 = -728						; size = 4
$T146392 = -724						; size = 28
_len$140840 = -696					; size = 4
_scFileName$140839 = -692				; size = 28
_hSearch$ = -664					; size = 4
_scRestartFiles$ = -660					; size = 28
_wscMsg$ = -632						; size = 28
_szCurDir$ = -604					; size = 260
_FileData$ = -340					; size = 320
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iClientID$ = 8						; size = 4
_wscCmd$ = 12						; size = 4
_wscParam$ = 16						; size = 4
_usage$ = 20						; size = 4
?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z PROC ; Restart::UserCmd_ShowRestarts
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 848				; 00000350H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 52
	lea	eax, DWORD PTR _szCurDir$[ebp]
	push	eax
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryA@8
; Line 53
	push	OFFSET $SG140827
	lea	ecx, DWORD PTR _szCurDir$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T146392[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR tv235[ebp], eax
	mov	edx, DWORD PTR tv235[ebp]
	mov	DWORD PTR tv215[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv215[ebp]
	push	eax
	lea	ecx, DWORD PTR _scRestartFiles$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T146392[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 56
	lea	edx, DWORD PTR _FileData$[ebp]
	push	edx
	lea	ecx, DWORD PTR _scRestartFiles$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__FindFirstFileA@8
	mov	DWORD PTR _hSearch$[ebp], eax
; Line 57
	cmp	DWORD PTR _hSearch$[ebp], -1
	jne	SHORT $LN5@UserCmd_Sh
; Line 59
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146393[ebp], esp
	push	OFFSET $SG140832
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv64[ebp], eax
	mov	eax, DWORD PTR tv64[ebp]
	mov	DWORD PTR tv218[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _iClientID$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 60
	mov	BYTE PTR $T146394[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _scRestartFiles$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146394[ebp]
	jmp	$LN6@UserCmd_Sh
$LN5@UserCmd_Sh:
; Line 63
	push	OFFSET $SG140835
	lea	ecx, DWORD PTR _wscMsg$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
$LN4@UserCmd_Sh:
; Line 68
	lea	edx, DWORD PTR _FileData$[ebp+44]
	push	edx
	lea	ecx, DWORD PTR _scFileName$140839[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 69
	lea	ecx, DWORD PTR _scFileName$140839[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	mov	DWORD PTR _len$140840[ebp], eax
; Line 70
	mov	eax, DWORD PTR _len$140840[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$140840[ebp]
	sub	ecx, 3
	push	ecx
	lea	ecx, DWORD PTR _scFileName$140839[ebp]
	call	DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
; Line 71
	push	0
	lea	ecx, DWORD PTR _scFileName$140839[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 95					; 0000005fH
	je	$LN1@UserCmd_Sh
; Line 72
	push	OFFSET $SG140934
	lea	eax, DWORD PTR _scFileName$140839[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146395[ebp]
	push	ecx
	call	DWORD PTR __imp_?stows@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv134[ebp], eax
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv223[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv223[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146396[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@ABV10@PBG@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv225[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR tv225[ebp]
	push	eax
	lea	ecx, DWORD PTR _wscMsg$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T146396[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T146395[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
$LN1@UserCmd_Sh:
; Line 73
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _scFileName$140839[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 74
	lea	ecx, DWORD PTR _FileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSearch$[ebp]
	push	edx
	call	DWORD PTR __imp__FindNextFileA@8
	test	eax, eax
	jne	$LN4@UserCmd_Sh
; Line 76
	mov	eax, DWORD PTR _hSearch$[ebp]
	push	eax
	call	DWORD PTR __imp__FindClose@4
; Line 78
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146397[ebp], esp
	push	OFFSET $SG140936
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv237[ebp], eax
	mov	ecx, DWORD PTR tv237[ebp]
	mov	DWORD PTR tv227[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR _iClientID$[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 79
	lea	ecx, DWORD PTR _wscMsg$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QBEPBGXZ
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146398[ebp], esp
	push	OFFSET $SG140938
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv239[ebp], eax
	mov	eax, DWORD PTR tv239[ebp]
	mov	DWORD PTR tv230[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _iClientID$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 36					; 00000024H
; Line 80
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146399[ebp], esp
	push	OFFSET $SG140940
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv241[ebp], eax
	mov	edx, DWORD PTR tv241[ebp]
	mov	DWORD PTR tv232[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR _iClientID$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 81
	mov	BYTE PTR $T146400[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _wscMsg$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _scRestartFiles$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146400[ebp]
$LN6@UserCmd_Sh:
; Line 82
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$0:
	lea	ecx, DWORD PTR $T146392[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$1:
	lea	ecx, DWORD PTR _scRestartFiles$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$2:
	mov	ecx, DWORD PTR $T146393[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$3:
	lea	ecx, DWORD PTR _wscMsg$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$4:
	lea	ecx, DWORD PTR _scFileName$140839[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$5:
	lea	ecx, DWORD PTR $T146395[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$6:
	lea	ecx, DWORD PTR $T146396[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$7:
	mov	ecx, DWORD PTR $T146397[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$8:
	mov	ecx, DWORD PTR $T146398[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$9:
	mov	ecx, DWORD PTR $T146399[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-852]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UserCmd_ShowRestarts@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z ENDP ; Restart::UserCmd_ShowRestarts
PUBLIC	?push_back@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXABURESTART@Restart@@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::push_back
PUBLIC	??1RESTART@Restart@@QAE@XZ			; Restart::RESTART::~RESTART
PUBLIC	??0RESTART@Restart@@QAE@XZ			; Restart::RESTART::RESTART
PUBLIC	__$ArrayPad$
PUBLIC	?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z ; Restart::UserCmd_Restart
EXTRN	__imp_?HkKickReason@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0@Z:PROC
EXTRN	__imp_?HkGetCharFileName@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAV23@@Z:PROC
EXTRN	__imp_?HkGetAccountDirName@@YA?AW4HK_ERROR@@PAVCAccount@@AAV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Z:PROC
EXTRN	__imp_?FindAccountFromClientID@PlayerDB@@QAEPAVCAccount@@I@Z:PROC
EXTRN	__imp_?HkGetCash@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAH@Z:PROC
EXTRN	?HkGetRank@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAH@Z:PROC ; HkGetRank
EXTRN	__imp_?GetBase@Player@pub@@YAHABIAAI@Z:PROC
EXTRN	__imp_?HkIsValidClientID@@YA_NI@Z:PROC
EXTRN	?HkSaveChar@@YAXI@Z:PROC			; HkSaveChar
EXTRN	__imp__PathFileExistsA@4:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z:PROC
EXTRN	__imp_??4?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAEAAV01@PBG@Z:PROC
EXTRN	__imp_?GetActiveCharacterName@PlayerDB@@QBEPBGI@Z:PROC
EXTRN	__imp_?Players@@3VPlayerDB@@A:BYTE
EXTRN	__imp_?length@?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QBEIXZ:PROC
EXTRN	__imp_?GetParam@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ABV12@GI@Z:PROC
xdata$x	SEGMENT
__ehfuncinfo$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$13
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$14
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$15
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$16
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$17
	DD	03H
	DD	FLAT:__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$18
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv380 = -924						; size = 4
tv404 = -920						; size = 4
tv376 = -916						; size = 4
tv402 = -912						; size = 4
tv372 = -908						; size = 4
tv400 = -904						; size = 4
tv366 = -900						; size = 4
tv398 = -896						; size = 4
tv364 = -892						; size = 4
tv397 = -888						; size = 4
tv362 = -884						; size = 4
tv396 = -880						; size = 4
tv360 = -876						; size = 4
tv395 = -872						; size = 4
tv358 = -868						; size = 4
tv394 = -864						; size = 4
tv356 = -860						; size = 4
tv393 = -856						; size = 4
tv354 = -852						; size = 4
tv392 = -848						; size = 4
tv352 = -844						; size = 4
tv391 = -840						; size = 4
tv350 = -836						; size = 4
tv390 = -832						; size = 4
tv348 = -828						; size = 4
tv389 = -824						; size = 4
tv346 = -820						; size = 4
tv136 = -816						; size = 4
tv342 = -812						; size = 4
tv387 = -808						; size = 4
tv340 = -804						; size = 4
tv64 = -800						; size = 4
$T146440 = -793						; size = 1
$T146439 = -792						; size = 28
$T146438 = -761						; size = 1
$T146437 = -760						; size = 4
$T146436 = -753						; size = 1
$T146435 = -752						; size = 4
$T146434 = -745						; size = 1
$T146433 = -744						; size = 4
$T146432 = -738						; size = 1
$T146431 = -737						; size = 1
$T146430 = -736						; size = 4
$T146429 = -732						; size = 28
$T146428 = -704						; size = 28
$T146427 = -676						; size = 28
$T146426 = -648						; size = 28
$T146425 = -620						; size = 28
$T146424 = -592						; size = 28
$T146423 = -564						; size = 28
$T146422 = -536						; size = 28
$T146421 = -508						; size = 28
$T146420 = -480						; size = 28
$T146419 = -449						; size = 1
$T146418 = -448						; size = 4
$T146417 = -444						; size = 4
_iRank$ = -440						; size = 4
_restart$ = -436					; size = 112
_szCurDir$ = -324					; size = 260
_wscFaction$ = -56					; size = 28
__$ArrayPad$ = -28					; size = 4
_acc$ = -24						; size = 4
_iBaseID$ = -20						; size = 4
_iCash$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iClientID$ = 8						; size = 4
_wscCmd$ = 12						; size = 4
_wscParam$ = 16						; size = 4
_usage$ = 20						; size = 4
?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z PROC ; Restart::UserCmd_Restart
; Line 94
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 912				; 00000390H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 95
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _wscParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetParam@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ABV12@GI@Z
	add	esp, 16					; 00000010H
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 96
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QBEIXZ
	test	eax, eax
	jne	$LN9@UserCmd_Re
; Line 98
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146417[ebp], esp
	push	OFFSET $SG141519
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv64[ebp], eax
	mov	edx, DWORD PTR tv64[ebp]
	mov	DWORD PTR tv340[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _iClientID$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 99
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146418[ebp], esp
	mov	edx, DWORD PTR _usage$[ebp]
	push	edx
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv387[ebp], eax
	mov	eax, DWORD PTR tv387[ebp]
	mov	DWORD PTR tv342[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _iClientID$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 100
	mov	BYTE PTR $T146419[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146419[ebp]
	jmp	$LN10@UserCmd_Re
$LN9@UserCmd_Re:
; Line 104
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??0RESTART@Restart@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 105
	mov	edx, DWORD PTR _iClientID$[ebp]
	push	edx
	mov	ecx, DWORD PTR __imp_?Players@@3VPlayerDB@@A
	call	DWORD PTR __imp_?GetActiveCharacterName@PlayerDB@@QBEPBGI@Z
	push	eax
	lea	ecx, DWORD PTR _restart$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAEAAV01@PBG@Z
; Line 109
	lea	eax, DWORD PTR _szCurDir$[ebp]
	push	eax
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryA@8
; Line 110
	push	OFFSET $SG141530
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146420[ebp]
	push	edx
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv136[ebp], eax
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR tv346[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv346[ebp]
	push	ecx
	push	OFFSET $SG141531
	lea	edx, DWORD PTR _szCurDir$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T146421[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR tv389[ebp], eax
	mov	eax, DWORD PTR tv389[ebp]
	mov	DWORD PTR tv348[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv348[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146422[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv390[ebp], eax
	mov	eax, DWORD PTR tv390[ebp]
	mov	DWORD PTR tv350[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv350[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146423[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv391[ebp], eax
	mov	eax, DWORD PTR tv391[ebp]
	mov	DWORD PTR tv352[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR tv352[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146424[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv392[ebp], eax
	mov	eax, DWORD PTR tv392[ebp]
	mov	DWORD PTR tv354[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR tv354[ebp]
	push	ecx
	lea	ecx, DWORD PTR _restart$[ebp+28]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T146424[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T146423[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T146422[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T146421[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T146420[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 111
	lea	ecx, DWORD PTR _restart$[ebp+28]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__PathFileExistsA@4
	test	eax, eax
	jne	$LN8@UserCmd_Re
; Line 113
	push	OFFSET $SG141538
	lea	edx, DWORD PTR _wscFaction$[ebp]
	push	edx
	lea	eax, DWORD PTR $T146425[ebp]
	push	eax
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv393[ebp], eax
	mov	ecx, DWORD PTR tv393[ebp]
	mov	DWORD PTR tv356[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv356[ebp]
	push	edx
	push	OFFSET $SG141539
	lea	eax, DWORD PTR _szCurDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146426[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR tv394[ebp], eax
	mov	ecx, DWORD PTR tv394[ebp]
	mov	DWORD PTR tv358[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	edx, DWORD PTR tv358[ebp]
	push	edx
	lea	eax, DWORD PTR $T146427[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv395[ebp], eax
	mov	ecx, DWORD PTR tv395[ebp]
	mov	DWORD PTR tv360[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR tv360[ebp]
	push	edx
	lea	eax, DWORD PTR $T146428[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv396[ebp], eax
	mov	ecx, DWORD PTR tv396[ebp]
	mov	DWORD PTR tv362[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR tv362[ebp]
	push	edx
	lea	eax, DWORD PTR $T146429[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv397[ebp], eax
	mov	ecx, DWORD PTR tv397[ebp]
	mov	DWORD PTR tv364[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	edx, DWORD PTR tv364[ebp]
	push	edx
	lea	ecx, DWORD PTR _restart$[ebp+28]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T146429[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T146428[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T146427[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T146426[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T146425[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 114
	lea	ecx, DWORD PTR _restart$[ebp+28]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__PathFileExistsA@4
	test	eax, eax
	jne	SHORT $LN8@UserCmd_Re
; Line 116
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146430[ebp], esp
	push	OFFSET $SG141542
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv398[ebp], eax
	mov	eax, DWORD PTR tv398[ebp]
	mov	DWORD PTR tv366[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _iClientID$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 117
	mov	BYTE PTR $T146431[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146431[ebp]
	jmp	$LN10@UserCmd_Re
$LN8@UserCmd_Re:
; Line 123
	mov	edx, DWORD PTR _iClientID$[ebp]
	push	edx
	call	?HkSaveChar@@YAXI@Z			; HkSaveChar
	add	esp, 4
; Line 124
	mov	eax, DWORD PTR _iClientID$[ebp]
	push	eax
	call	DWORD PTR __imp_?HkIsValidClientID@@YA_NI@Z
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@UserCmd_Re
; Line 125
	mov	BYTE PTR $T146432[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146432[ebp]
	jmp	$LN10@UserCmd_Re
$LN6@UserCmd_Re:
; Line 128
	lea	edx, DWORD PTR _iBaseID$[ebp]
	push	edx
	lea	eax, DWORD PTR _iClientID$[ebp]
	push	eax
	call	DWORD PTR __imp_?GetBase@Player@pub@@YAHABIAAI@Z
	add	esp, 8
; Line 129
	cmp	DWORD PTR _iBaseID$[ebp], 0
	jne	SHORT $LN5@UserCmd_Re
; Line 131
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146433[ebp], esp
	push	OFFSET $SG141549
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv400[ebp], eax
	mov	ecx, DWORD PTR tv400[ebp]
	mov	DWORD PTR tv372[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	edx, DWORD PTR _iClientID$[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 132
	mov	BYTE PTR $T146434[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146434[ebp]
	jmp	$LN10@UserCmd_Re
$LN5@UserCmd_Re:
; Line 136
	mov	DWORD PTR _iRank$[ebp], 0
; Line 137
	lea	eax, DWORD PTR _iRank$[ebp]
	push	eax
	lea	ecx, DWORD PTR _restart$[ebp]
	push	ecx
	call	?HkGetRank@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAH@Z ; HkGetRank
	add	esp, 8
; Line 138
	cmp	DWORD PTR _iRank$[ebp], 0
	je	SHORT $LN3@UserCmd_Re
	mov	edx, DWORD PTR _iRank$[ebp]
	cmp	edx, DWORD PTR _set_iMaxRank
	jle	SHORT $LN4@UserCmd_Re
$LN3@UserCmd_Re:
; Line 140
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146435[ebp], esp
	push	OFFSET $SG141555
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv402[ebp], eax
	mov	eax, DWORD PTR tv402[ebp]
	mov	DWORD PTR tv376[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR _iClientID$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 141
	mov	BYTE PTR $T146436[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146436[ebp]
	jmp	$LN10@UserCmd_Re
$LN4@UserCmd_Re:
; Line 144
	mov	DWORD PTR _iCash$[ebp], 0
; Line 145
	lea	edx, DWORD PTR _iCash$[ebp]
	push	edx
	lea	eax, DWORD PTR _restart$[ebp]
	push	eax
	call	DWORD PTR __imp_?HkGetCash@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAH@Z
	add	esp, 8
; Line 146
	mov	ecx, DWORD PTR _iCash$[ebp]
	cmp	ecx, DWORD PTR _set_iMaxCash
	jle	SHORT $LN2@UserCmd_Re
; Line 148
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T146437[ebp], esp
	push	OFFSET $SG141560
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	DWORD PTR tv404[ebp], eax
	mov	edx, DWORD PTR tv404[ebp]
	mov	DWORD PTR tv380[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	eax, DWORD PTR _iClientID$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	DWORD PTR __imp_?PrintUserCmdText@@YAXIV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@ZZ
	add	esp, 32					; 00000020H
; Line 149
	mov	BYTE PTR $T146438[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146438[ebp]
	jmp	$LN10@UserCmd_Re
$LN2@UserCmd_Re:
; Line 152
	mov	ecx, DWORD PTR _iClientID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Players@@3VPlayerDB@@A
	call	DWORD PTR __imp_?FindAccountFromClientID@PlayerDB@@QAEPAVCAccount@@I@Z
	mov	DWORD PTR _acc$[ebp], eax
; Line 153
	cmp	DWORD PTR _acc$[ebp], 0
	je	SHORT $LN1@UserCmd_Re
; Line 155
	lea	edx, DWORD PTR _restart$[ebp+56]
	push	edx
	mov	eax, DWORD PTR _acc$[ebp]
	push	eax
	call	DWORD PTR __imp_?HkGetAccountDirName@@YA?AW4HK_ERROR@@PAVCAccount@@AAV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Z
	add	esp, 8
; Line 156
	lea	ecx, DWORD PTR _restart$[ebp+84]
	push	ecx
	lea	edx, DWORD PTR _restart$[ebp]
	push	edx
	call	DWORD PTR __imp_?HkGetCharFileName@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAV23@@Z
	add	esp, 8
; Line 157
	lea	eax, DWORD PTR _restart$[ebp]
	push	eax
	mov	ecx, OFFSET ?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
	call	?push_back@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXABURESTART@Restart@@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::push_back
; Line 158
	push	OFFSET $SG141565
	lea	ecx, DWORD PTR $T146439[ebp]
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@PBG@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR $T146439[ebp]
	push	ecx
	lea	edx, DWORD PTR _restart$[ebp]
	push	edx
	call	DWORD PTR __imp_?HkKickReason@@YA?AW4HK_ERROR@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T146439[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
$LN1@UserCmd_Re:
; Line 160
	mov	BYTE PTR $T146440[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _restart$[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T146440[ebp]
$LN10@UserCmd_Re:
; Line 161
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$0:
	lea	ecx, DWORD PTR _wscFaction$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$1:
	mov	ecx, DWORD PTR $T146417[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$2:
	mov	ecx, DWORD PTR $T146418[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$3:
	lea	ecx, DWORD PTR _restart$[ebp]
	jmp	??1RESTART@Restart@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$4:
	lea	ecx, DWORD PTR $T146420[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$5:
	lea	ecx, DWORD PTR $T146421[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$6:
	lea	ecx, DWORD PTR $T146422[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$7:
	lea	ecx, DWORD PTR $T146423[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$8:
	lea	ecx, DWORD PTR $T146424[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$9:
	lea	ecx, DWORD PTR $T146425[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$10:
	lea	ecx, DWORD PTR $T146426[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$11:
	lea	ecx, DWORD PTR $T146427[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$12:
	lea	ecx, DWORD PTR $T146428[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$13:
	lea	ecx, DWORD PTR $T146429[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$14:
	mov	ecx, DWORD PTR $T146430[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$15:
	mov	ecx, DWORD PTR $T146433[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$16:
	mov	ecx, DWORD PTR $T146435[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$17:
	mov	ecx, DWORD PTR $T146437[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z$18:
	lea	ecx, DWORD PTR $T146439[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-916]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UserCmd_Restart@Restart@@YA_NIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@0PBG@Z ENDP ; Restart::UserCmd_Restart
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RESTART@Restart@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@XZ$3
__ehfuncinfo$??0RESTART@Restart@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0RESTART@Restart@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RESTART@Restart@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RESTART@Restart@@QAE@XZ PROC				; Restart::RESTART::RESTART, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RESTART@Restart@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RESTART@Restart@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$??0RESTART@Restart@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??0RESTART@Restart@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$??0RESTART@Restart@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$??0RESTART@Restart@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RESTART@Restart@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RESTART@Restart@@QAE@XZ ENDP				; Restart::RESTART::RESTART
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RESTART@Restart@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RESTART@Restart@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1RESTART@Restart@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1RESTART@Restart@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1RESTART@Restart@@QAE@XZ$3
__ehfuncinfo$??1RESTART@Restart@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1RESTART@Restart@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1RESTART@Restart@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RESTART@Restart@@QAE@XZ PROC				; Restart::RESTART::~RESTART, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RESTART@Restart@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RESTART@Restart@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$??1RESTART@Restart@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??1RESTART@Restart@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$??1RESTART@Restart@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$??1RESTART@Restart@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RESTART@Restart@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RESTART@Restart@@QAE@XZ ENDP				; Restart::RESTART::~RESTART
PUBLIC	__TI2PAD
PUBLIC	?pop_front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::pop_front
PUBLIC	??0RESTART@Restart@@QAE@ABU01@@Z		; Restart::RESTART::RESTART
PUBLIC	?front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAURESTART@Restart@@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::front
PUBLIC	?size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::size
PUBLIC	__$ArrayPad$
PUBLIC	?Timer@Restart@@YAXXZ				; Restart::Timer
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	__imp_?AddLog@@YAXPBDZZ:PROC
EXTRN	__imp_?flc_encode@@YA_NPBD0@Z:PROC
EXTRN	__imp_?set_bDisableCharfileEncryption@@3_NA:BYTE
EXTRN	__imp_?IniWrite@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z:PROC
EXTRN	__imp_?IniWriteW@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z:PROC
EXTRN	__imp_?flc_decode@@YA_NPBD0@Z:PROC
EXTRN	__imp__CopyFileA@12:PROC
EXTRN	__imp_?IniGetS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@000@Z:PROC
EXTRN	__imp_?scAcctPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A:BYTE
EXTRN	__imp_?HkGetClientIdFromCharname@@YAIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0PAX@8
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__tryblocktable$?Timer@Restart@@YAXXZ DD 01H
	DD	021H
	DD	024H
	DD	02H
	DD	FLAT:__catchsym$?Timer@Restart@@YAXXZ$27
__catchsym$?Timer@Restart@@YAXXZ$27 DD 00H
	DD	FLAT:??_R0PAD@8
	DD	0ffffff20H
	DD	FLAT:__catch$?Timer@Restart@@YAXXZ$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Timer@Restart@@YAXXZ$1
__ehfuncinfo$?Timer@Restart@@YAXXZ DD 019930522H
	DD	025H
	DD	FLAT:__unwindtable$?Timer@Restart@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Timer@Restart@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?Timer@Restart@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$4
	DD	02H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$7
	DD	05H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$8
	DD	06H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$9
	DD	05H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$9
	DD	04H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$9
	DD	03H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$9
	DD	02H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$9
	DD	01H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$9
	DD	0cH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$10
	DD	0dH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$11
	DD	0eH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$12
	DD	0fH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$13
	DD	0eH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$13
	DD	013H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$14
	DD	014H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$15
	DD	015H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$16
	DD	016H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$17
	DD	015H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$17
	DD	014H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$17
	DD	013H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$17
	DD	01aH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$18
	DD	01bH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$19
	DD	01aH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$20
	DD	01dH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$21
	DD	01aH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$22
	DD	01fH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$23
	DD	01aH
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$24
	DD	00H
	DD	00H
	DD	022H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$25
	DD	022H
	DD	FLAT:__unwindfunclet$?Timer@Restart@@YAXXZ$26
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv305 = -852						; size = 4
tv216 = -848						; size = 4
tv302 = -844						; size = 4
tv223 = -840						; size = 4
tv300 = -836						; size = 4
tv228 = -832						; size = 4
tv283 = -828						; size = 4
tv310 = -824						; size = 4
tv281 = -820						; size = 4
tv309 = -816						; size = 4
tv279 = -812						; size = 4
tv308 = -808						; size = 4
tv277 = -804						; size = 4
tv307 = -800						; size = 4
tv275 = -796						; size = 4
tv68 = -792						; size = 4
$T146511 = -788						; size = 28
$T146510 = -760						; size = 28
$T146509 = -732						; size = 28
$T146508 = -704						; size = 28
$T146507 = -676						; size = 28
$T146506 = -648						; size = 28
$T146505 = -620						; size = 28
$T146504 = -592						; size = 28
$T146503 = -564						; size = 28
$T146501 = -536						; size = 4
$T146500 = -532						; size = 28
$T146499 = -504						; size = 28
$T146498 = -476						; size = 28
$T146497 = -448						; size = 28
$T146496 = -420						; size = 28
$T146495 = -392						; size = 28
$T146494 = -364						; size = 28
$T146493 = -336						; size = 28
$T146492 = -308						; size = 28
$T146491 = -280						; size = 28
$T146490 = -252						; size = 28
_err$141628 = -224					; size = 4
_scCharFile$141579 = -220				; size = 28
_scTimeStamp$141596 = -192				; size = 28
_scTimeStampDesc$141588 = -164				; size = 28
_restart$141576 = -136					; size = 112
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?Timer@Restart@@YAXXZ PROC				; Restart::Timer
; Line 164
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Timer@Restart@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 836				; 00000344H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
$LN6@Timer:
; Line 165
	mov	ecx, OFFSET ?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
	call	?size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::size
	test	eax, eax
	je	$LN8@Timer
; Line 167
	mov	ecx, OFFSET ?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
	call	?front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAURESTART@Restart@@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::front
	push	eax
	lea	ecx, DWORD PTR _restart$141576[ebp]
	call	??0RESTART@Restart@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 168
	lea	eax, DWORD PTR _restart$141576[ebp]
	push	eax
	call	DWORD PTR __imp_?HkGetClientIdFromCharname@@YAIABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Z
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN4@Timer
; Line 169
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _restart$141576[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	jmp	$LN8@Timer
$LN4@Timer:
; Line 171
	mov	ecx, OFFSET ?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
	call	?pop_front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::pop_front
; Line 174
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 176
	push	OFFSET $SG141586
	lea	ecx, DWORD PTR _restart$141576[ebp+84]
	push	ecx
	lea	edx, DWORD PTR $T146490[ebp]
	push	edx
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv275[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	ecx, DWORD PTR tv275[ebp]
	push	ecx
	push	OFFSET $SG141587
	lea	edx, DWORD PTR _restart$141576[ebp+56]
	push	edx
	lea	eax, DWORD PTR $T146491[ebp]
	push	eax
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv307[ebp], eax
	mov	ecx, DWORD PTR tv307[ebp]
	mov	DWORD PTR tv277[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	edx, DWORD PTR tv277[ebp]
	push	edx
	mov	eax, DWORD PTR __imp_?scAcctPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
	push	eax
	lea	ecx, DWORD PTR $T146492[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv308[ebp], eax
	mov	edx, DWORD PTR tv308[ebp]
	mov	DWORD PTR tv279[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	eax, DWORD PTR tv279[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146493[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv309[ebp], eax
	mov	edx, DWORD PTR tv309[ebp]
	mov	DWORD PTR tv281[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	mov	eax, DWORD PTR tv281[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146494[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv310[ebp], eax
	mov	edx, DWORD PTR tv310[ebp]
	mov	DWORD PTR tv283[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	eax, DWORD PTR tv283[ebp]
	push	eax
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR $T146494[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR $T146493[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	lea	ecx, DWORD PTR $T146492[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR $T146491[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR $T146490[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 177
	push	OFFSET $SG141593
	lea	ecx, DWORD PTR $T146495[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	push	OFFSET $SG141594
	lea	ecx, DWORD PTR $T146496[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	push	OFFSET $SG141595
	lea	ecx, DWORD PTR $T146497[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
	lea	edx, DWORD PTR $T146495[ebp]
	push	edx
	lea	eax, DWORD PTR $T146496[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146497[ebp]
	push	ecx
	lea	edx, DWORD PTR _scCharFile$141579[ebp]
	push	edx
	lea	eax, DWORD PTR _scTimeStampDesc$141588[ebp]
	push	eax
	call	DWORD PTR __imp_?IniGetS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@000@Z
	add	esp, 20					; 00000014H
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR $T146497[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR $T146496[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
	lea	ecx, DWORD PTR $T146495[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 178
	push	OFFSET $SG141601
	lea	ecx, DWORD PTR $T146498[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	push	OFFSET $SG141602
	lea	ecx, DWORD PTR $T146499[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	push	OFFSET $SG141603
	lea	ecx, DWORD PTR $T146500[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR $T146498[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146499[ebp]
	push	edx
	lea	eax, DWORD PTR $T146500[ebp]
	push	eax
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	push	ecx
	lea	edx, DWORD PTR _scTimeStamp$141596[ebp]
	push	edx
	call	DWORD PTR __imp_?IniGetS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@000@Z
	add	esp, 20					; 00000014H
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	lea	ecx, DWORD PTR $T146500[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR $T146499[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T146498[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 179
	push	0
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _restart$141576[ebp+28]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__CopyFileA@12
	test	eax, eax
	jne	SHORT $LN2@Timer
; Line 180
	mov	DWORD PTR $T146501[ebp], OFFSET $SG141612
	push	OFFSET __TI2PAD
	lea	eax, DWORD PTR $T146501[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Timer:
; Line 182
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp_?flc_decode@@YA_NPBD0@Z
	add	esp, 8
; Line 183
	push	OFFSET $SG141615
	lea	ecx, DWORD PTR $T146503[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	push	OFFSET $SG141616
	lea	ecx, DWORD PTR $T146504[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR _restart$141576[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146503[ebp]
	push	edx
	lea	eax, DWORD PTR $T146504[ebp]
	push	eax
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	push	ecx
	call	DWORD PTR __imp_?IniWriteW@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR $T146504[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T146503[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 184
	push	OFFSET $SG141619
	lea	ecx, DWORD PTR $T146505[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	push	OFFSET $SG141620
	lea	ecx, DWORD PTR $T146506[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
	lea	edx, DWORD PTR _scTimeStampDesc$141588[ebp]
	push	edx
	lea	eax, DWORD PTR $T146505[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146506[ebp]
	push	ecx
	lea	edx, DWORD PTR _scCharFile$141579[ebp]
	push	edx
	call	DWORD PTR __imp_?IniWrite@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR $T146506[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T146505[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 185
	push	OFFSET $SG141623
	lea	ecx, DWORD PTR $T146507[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	push	OFFSET $SG141624
	lea	ecx, DWORD PTR $T146508[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	lea	eax, DWORD PTR _scTimeStamp$141596[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146507[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146508[ebp]
	push	edx
	lea	eax, DWORD PTR _scCharFile$141579[ebp]
	push	eax
	call	DWORD PTR __imp_?IniWrite@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	lea	ecx, DWORD PTR $T146508[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T146507[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 186
	mov	ecx, DWORD PTR __imp_?set_bDisableCharfileEncryption@@3_NA
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN1@Timer
; Line 187
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp_?flc_encode@@YA_NPBD0@Z
	add	esp, 8
$LN1@Timer:
; Line 189
	lea	eax, DWORD PTR _restart$141576[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146509[ebp]
	push	ecx
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv228[ebp], eax
	mov	edx, DWORD PTR tv228[ebp]
	mov	DWORD PTR tv300[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 33		; 00000021H
	mov	ecx, DWORD PTR tv300[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _restart$141576[ebp+28]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET $SG141627
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T146509[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 190
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
	lea	ecx, DWORD PTR _scTimeStamp$141596[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _scTimeStampDesc$141588[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN9@Timer
__catch$?Timer@Restart@@YAXXZ$0:
; Line 193
	lea	eax, DWORD PTR _restart$141576[ebp]
	push	eax
	lea	ecx, DWORD PTR $T146510[ebp]
	push	ecx
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv223[ebp], eax
	mov	edx, DWORD PTR tv223[ebp]
	mov	DWORD PTR tv302[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
	mov	ecx, DWORD PTR tv302[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	eax, DWORD PTR _err$141628[ebp]
	push	eax
	push	OFFSET $SG141630
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	lea	ecx, DWORD PTR $T146510[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 194
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?Timer@Restart@@YAXXZ$2
	ret	0
__catch$?Timer@Restart@@YAXXZ$1:
; Line 197
	lea	ecx, DWORD PTR _restart$141576[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146511[ebp]
	push	edx
	call	DWORD PTR __imp_?wstos@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv216[ebp], eax
	mov	eax, DWORD PTR tv216[ebp]
	mov	DWORD PTR tv305[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 36		; 00000024H
	mov	ecx, DWORD PTR tv305[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET $SG141632
	call	DWORD PTR __imp_?AddLog@@YAXPBDZZ
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	lea	ecx, DWORD PTR $T146511[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
; Line 198
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?Timer@Restart@@YAXXZ$2
	ret	0
$LN9@Timer:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?Timer@Restart@@YAXXZ$2:
; Line 199
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _restart$141576[ebp]
	call	??1RESTART@Restart@@QAE@XZ
	jmp	$LN6@Timer
$LN8@Timer:
; Line 200
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Timer@Restart@@YAXXZ$3:
	lea	ecx, DWORD PTR _restart$141576[ebp]
	jmp	??1RESTART@Restart@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$4:
	lea	ecx, DWORD PTR $T146490[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$5:
	lea	ecx, DWORD PTR $T146491[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$6:
	lea	ecx, DWORD PTR $T146492[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$7:
	lea	ecx, DWORD PTR $T146493[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$8:
	lea	ecx, DWORD PTR $T146494[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$9:
	lea	ecx, DWORD PTR _scCharFile$141579[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$10:
	lea	ecx, DWORD PTR $T146495[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$11:
	lea	ecx, DWORD PTR $T146496[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$12:
	lea	ecx, DWORD PTR $T146497[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$13:
	lea	ecx, DWORD PTR _scTimeStampDesc$141588[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$14:
	lea	ecx, DWORD PTR $T146498[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$15:
	lea	ecx, DWORD PTR $T146499[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$16:
	lea	ecx, DWORD PTR $T146500[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$17:
	lea	ecx, DWORD PTR _scTimeStamp$141596[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$18:
	lea	ecx, DWORD PTR $T146503[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$19:
	lea	ecx, DWORD PTR $T146504[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$20:
	lea	ecx, DWORD PTR $T146505[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$21:
	lea	ecx, DWORD PTR $T146506[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$22:
	lea	ecx, DWORD PTR $T146507[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$23:
	lea	ecx, DWORD PTR $T146508[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$24:
	lea	ecx, DWORD PTR $T146509[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$25:
	lea	ecx, DWORD PTR $T146510[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?Timer@Restart@@YAXXZ$26:
	lea	ecx, DWORD PTR $T146511[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Timer@Restart@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-856]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Timer@Restart@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Timer@Restart@@YAXXZ ENDP				; Restart::Timer
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RESTART@Restart@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$3
__ehfuncinfo$??0RESTART@Restart@@QAE@ABU01@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0RESTART@Restart@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RESTART@Restart@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RESTART@Restart@@QAE@ABU01@@Z PROC			; Restart::RESTART::RESTART, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RESTART@Restart@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	DWORD PTR __imp_??0?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__unwindfunclet$??0RESTART@Restart@@QAE@ABU01@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	DWORD PTR __imp_??1?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@QAE@XZ
__ehhandler$??0RESTART@Restart@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RESTART@Restart@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RESTART@Restart@@QAE@ABU01@@Z ENDP			; Restart::RESTART::RESTART
; Function compile flags: /Odtp
;	COMDAT ?size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
; Line 619
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 620
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
; Line 621
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::size
_TEXT	ENDS
PUBLIC	??D?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEAAURESTART@Restart@@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::operator*
PUBLIC	?begin@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::begin
; Function compile flags: /Odtp
;	COMDAT ?front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAURESTART@Restart@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T146566 = -8						; size = 8
?front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAURESTART@Restart@@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::front, COMDAT
; _this$ = ecx
; Line 639
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 640
	lea	eax, DWORD PTR $T146566[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::begin
	mov	ecx, eax
	call	??D?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEAAURESTART@Restart@@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::operator*
; Line 641
	mov	esp, ebp
	pop	ebp
	ret	0
?front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAURESTART@Restart@@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::front
_TEXT	ENDS
PUBLIC	?erase@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::erase
; Function compile flags: /Odtp
;	COMDAT ?pop_front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T146571 = -24						; size = 8
$T146570 = -16						; size = 8
$T146569 = -8						; size = 8
?pop_front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::pop_front, COMDAT
; _this$ = ecx
; Line 664
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	eax, DWORD PTR $T146570[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T146569[ebp], ecx
	mov	DWORD PTR $T146569[ebp+4], edx
	mov	eax, DWORD PTR $T146569[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T146569[ebp]
	push	ecx
	lea	edx, DWORD PTR $T146571[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::erase
; Line 666
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_front@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::pop_front
_TEXT	ENDS
PUBLIC	?_Insert@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABURESTART@Restart@@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Insert
PUBLIC	?end@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::end
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXABURESTART@Restart@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T146575 = -16						; size = 8
$T146574 = -8						; size = 8
__Val$ = 8						; size = 4
?push_back@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXABURESTART@Restart@@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::push_back, COMDAT
; _this$ = ecx
; Line 669
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
; Line 670
	lea	eax, DWORD PTR $T146575[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T146574[ebp], ecx
	mov	DWORD PTR $T146574[ebp+4], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T146574[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T146574[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABURESTART@Restart@@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Insert
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXABURESTART@Restart@@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::push_back
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::_Iterator<1>
PUBLIC	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
; Function compile flags: /Odtp
;	COMDAT ?begin@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::begin, COMDAT
; _this$ = ecx
; Line 533
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 534
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::_Iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 535
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::end, COMDAT
; _this$ = ecx
; Line 543
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 544
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::_Iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 545
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::end
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Incsize
PUBLIC	?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode
PUBLIC	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@3@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Odtp
;	COMDAT ?_Insert@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABURESTART@Restart@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnode$ = -8						; size = 4
__Newnode$ = -4						; size = 4
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABURESTART@Restart@@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Insert, COMDAT
; _this$ = ecx
; Line 710
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 717
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@3@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
; Line 718
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax
; Line 719
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Incsize
; Line 720
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
; Line 721
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
; Line 722
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABURESTART@Restart@@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Insert
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Make_iter
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::destroy
PUBLIC	??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV012@H@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++
; Function compile flags: /Odtp
;	COMDAT ?erase@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T146584 = -12						; size = 8
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::erase, COMDAT
; _this$ = ecx
; Line 786
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 795
	push	0
	lea	eax, DWORD PTR $T146584[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV012@H@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++
	mov	ecx, eax
	call	?_Mynode@?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@3@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
; Line 798
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	je	$LN1@erase
; Line 800
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
; Line 801
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
; Line 802
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?destroy@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::destroy
; Line 803
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
; Line 804
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@erase:
; Line 806
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 807
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::erase
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEABURESTART@Restart@@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator*
; Function compile flags: /Odtp
;	COMDAT ??D?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEAAURESTART@Restart@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEAAURESTART@Restart@@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::operator*, COMDAT
; _this$ = ecx
; Line 393
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 394
	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEABURESTART@Restart@@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator*
; Line 395
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEAAURESTART@Restart@@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode, COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
; Line 115
	mov	eax, DWORD PTR __Pnode$[ebp]
; Line 116
	pop	ebp
	ret	0
?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode, COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
; Line 120
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
; Line 121
	pop	ebp
	ret	0
?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Make_iter, COMDAT
; _this$ = ecx
; Line 553
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::_Iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 555
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Make_iter
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
PUBLIC	?construct@?$allocator@URESTART@Restart@@@std@@QAEXPAURESTART@Restart@@ABU34@@Z ; std::allocator<Restart::RESTART>::construct
PUBLIC	?_Myval@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAURESTART@Restart@@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Myval
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z$0
__unwindtable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z$2
__ehfuncinfo$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode, COMDAT
; _this$ = ecx
; Line 1190
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1191
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax
; Line 1192
	mov	DWORD PTR __Linkcnt$[ebp], 0
; Line 1194
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1195
	lea	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct
; Line 1196
	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx
; Line 1197
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct
; Line 1198
	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx
; Line 1199
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAURESTART@Restart@@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Myval
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?construct@?$allocator@URESTART@Restart@@@std@@QAEXPAURESTART@Restart@@ABU34@@Z ; std::allocator<Restart::RESTART>::construct
	jmp	SHORT $LN6@Buynode
__catch$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z$0:
; Line 1201
	cmp	DWORD PTR __Linkcnt$[ebp], 1
	jle	SHORT $LN2@Buynode
; Line 1202
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
$LN2@Buynode:
; Line 1203
	cmp	DWORD PTR __Linkcnt$[ebp], 0
	jle	SHORT $LN1@Buynode
; Line 1204
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
$LN1@Buynode:
; Line 1205
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
; Line 1206
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1207
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z$1
	ret	0
$LN6@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z$1:
; Line 1208
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN5@Buynode:
; Line 1209
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@0ABURESTART@Restart@@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?max_size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::max_size
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T146611 = -80						; size = 28
$T146610 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Incsize, COMDAT
; _this$ = ecx
; Line 1239
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1240
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize
; Line 1241
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T146611[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR $T146611[ebp]
	push	edx
	lea	ecx, DWORD PTR $T146610[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	eax, DWORD PTR $T146610[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T146611[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@Incsize:
; Line 1242
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN3@Incsize:
; Line 1243
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T146611[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXI@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Incsize
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx
; Line 105
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
; Line 106
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 27
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 31
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 35
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
; Line 36
	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx
; Line 109
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 110
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 141
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocate, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>
	add	esp, 8
; Line 146
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::destroy, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 160
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>
	add	esp, 4
; Line 161
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *,std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct, COMDAT
; _this$ = ecx
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 155
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *,std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>
	add	esp, 8
; Line 156
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 160
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>
	add	esp, 4
; Line 161
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
; Line 361
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Const_iterator<1>
; Line 362
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??D?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEABURESTART@Restart@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEABURESTART@Restart@@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx
; Line 211
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@operator
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN7@operator:
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN10@operator:
; Line 223
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+20]
	jne	SHORT $LN2@operator
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN2@operator
$LN5@operator:
; Line 226
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Myval@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAURESTART@Restart@@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Myval
	add	esp, 4
; Line 227
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEABURESTART@Restart@@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 458
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]
; Line 459
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx
; Line 368
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 369
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 370
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx
; Line 467
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 468
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl
; Line 469
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAV012@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++
; Function compile flags: /Odtp
;	COMDAT ??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
; Line 255
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx
; Line 257
	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAV012@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++
; Line 258
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 259
	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@3@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx
; Line 307
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 308
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 309
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@3@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ?_Myval@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAURESTART@Restart@@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAURESTART@Restart@@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Myval, COMDAT
; Line 124
	push	ebp
	mov	ebp, esp
; Line 125
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8
; Line 126
	pop	ebp
	ret	0
?_Myval@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAURESTART@Restart@@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Myval
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@URESTART@Restart@@@std@@QBEIXZ ; std::allocator<Restart::RESTART>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::max_size, COMDAT
; _this$ = ecx
; Line 624
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 625
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@URESTART@Restart@@@std@@QBEIXZ ; std::allocator<Restart::RESTART>::max_size
; Line 626
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QBEIXZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::max_size
_TEXT	ENDS
PUBLIC	??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z ; std::_Construct<Restart::RESTART,Restart::RESTART>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@URESTART@Restart@@@std@@QAEXPAURESTART@Restart@@ABU34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URESTART@Restart@@@std@@QAEXPAURESTART@Restart@@ABU34@@Z PROC ; std::allocator<Restart::RESTART>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 155
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z ; std::_Construct<Restart::RESTART,Restart::RESTART>
	add	esp, 8
; Line 156
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@URESTART@Restart@@@std@@QAEXPAURESTART@Restart@@ABU34@@Z ENDP ; std::allocator<Restart::RESTART>::construct
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Bidit@URESTART@Restart@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &>::_Bidit<Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Bidit@URESTART@Restart@@HPBU12@ABU12@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 177
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@Const_iter
	cmp	DWORD PTR __Plist$[ebp], 0
	jne	SHORT $LN2@Const_iter
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Const_iter:
	xor	eax, eax
	jne	SHORT $LN2@Const_iter
$LN5@Const_iter:
; Line 178
	mov	ecx, DWORD PTR __Plist$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PBV12@@Z ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
; Line 452
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 453
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 454
	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 246
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN7@operator@2:
	xor	edx, edx
	jne	SHORT $LN7@operator@2
$LN10@operator@2:
; Line 247
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+20]
	jne	SHORT $LN2@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@2:
	xor	eax, eax
	jne	SHORT $LN2@operator@2
$LN5@operator@2:
; Line 250
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
; Line 252
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Const_iterator@$00@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@URESTART@Restart@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Bidit@URESTART@Restart@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Bidit@URESTART@Restart@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &>::_Bidit<Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@URESTART@Restart@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Bidit@URESTART@Restart@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &>::_Bidit<Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@URESTART@Restart@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@URESTART@Restart@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@URESTART@Restart@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,Restart::RESTART,int,Restart::RESTART const *,Restart::RESTART const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
; Line 448
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@URESTART@Restart@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@URESTART@Restart@@@std@@QBEIXZ PROC ; std::allocator<Restart::RESTART>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 165
	mov	DWORD PTR __Count$[ebp], 38347922	; 02492492H
; Line 166
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]
; Line 167
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@URESTART@Restart@@@std@@QBEIXZ ENDP ; std::allocator<Restart::RESTART>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T146732 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>, COMDAT
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 37
	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate
; Line 38
	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:
; Line 39
	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 120				; 00000078H
	jae	SHORT $LN2@Allocate
; Line 40
	push	0
	lea	ecx, DWORD PTR $T146732[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T146732[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:
; Line 43
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 120				; 00000078H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
; Line 372
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
; Line 380
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 381
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>, COMDAT
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 58
	push	ebp
	mov	ebp, esp
; Line 59
	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEPAXI@Z
; Line 60
	pop	ebp
	ret	0
??$_Destroy@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Odtp
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T146757 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *,std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>, COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 51
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax
; Line 52
	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T146757[ebp], eax
	cmp	DWORD PTR $T146757[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR $T146757[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T146757[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@Construct
$LN3@Construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@Construct:
; Line 53
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *,std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
; Line 58
	push	ebp
	mov	ebp, esp
; Line 59
	mov	eax, DWORD PTR __Where$[ebp]
; Line 60
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 58
	push	ebp
	mov	ebp, esp
; Line 60
	pop	ebp
	ret	0
??$_Destroy@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T146767 = -24						; size = 4
$T146766 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z PROC ; std::_Construct<Restart::RESTART,Restart::RESTART>, COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 51
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax
; Line 52
	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	112					; 00000070H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T146767[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T146767[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T146767[ebp]
	call	??0RESTART@Restart@@QAE@ABU01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct@2:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T146766[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 53
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T146767[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@URESTART@Restart@@U12@@std@@YAXPAURESTART@Restart@@ABU12@@Z ENDP ; std::_Construct<Restart::RESTART,Restart::RESTART>
; Function compile flags: /Odtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
; Line 63
	push	ebp
	mov	ebp, esp
; Line 64
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node::~_Node
; Function compile flags: /Odtp
;	COMDAT ??_G_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node::~_Node, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1RESTART@Restart@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1RESTART@Restart@@QAE@XZ
__ehhandler$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node::~_Node
PUBLIC	??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::list<Restart::RESTART,std::allocator<Restart::RESTART> >
EXTRN	_atexit:PROC
; Function compile flags: /Odtp
;	COMDAT ??__EpendingRestarts@Restart@@YAXXZ
text$yc	SEGMENT
??__EpendingRestarts@Restart@@YAXXZ PROC		; Restart::`dynamic initializer for 'pendingRestarts'', COMDAT
; File g:\max\bastelstube\fl\flhook source\flhookplugin_mod\plugins\playercntl_plugin\src\restart.cpp
; Line 91
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
	call	??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::list<Restart::RESTART,std::allocator<Restart::RESTART> >
	push	OFFSET ??__FpendingRestarts@Restart@@YAXXZ ; Restart::`dynamic atexit destructor for 'pendingRestarts''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EpendingRestarts@Restart@@YAXXZ ENDP		; Restart::`dynamic initializer for 'pendingRestarts''
text$yc	ENDS
PUBLIC	??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode
PUBLIC	??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??0?$allocator@URESTART@Restart@@@std@@QAE@XZ	; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T146804 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::list<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 436
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T146804[ebp], esp
	call	??0?$allocator@URESTART@Restart@@@std@@QAE@XZ ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 437
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::list<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ PROC ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::~_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::~_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::~_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
__ehhandler$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::~_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ$0
__unwindtable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode, COMDAT
; _this$ = ecx
; Line 1171
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1172
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax
; Line 1173
	mov	DWORD PTR __Linkcnt$[ebp], 0
; Line 1175
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1176
	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct
; Line 1177
	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx
; Line 1178
	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::construct
	jmp	SHORT $LN5@Buynode@2
__catch$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ$0:
; Line 1180
	cmp	DWORD PTR __Linkcnt$[ebp], 0
	jle	SHORT $LN1@Buynode@2
; Line 1181
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
$LN1@Buynode@2:
; Line 1182
	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
; Line 1183
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1184
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ$1
	ret	0
$LN5@Buynode@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ$1:
; Line 1185
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode@2:
; Line 1186
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Buynode
PUBLIC	??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z$0
__ehfuncinfo$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T146856 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z PROC ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 85
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T146856[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
; Line 86
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@V?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_val<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::~_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 436
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 439
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Line 440
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::~_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx
; Line 402
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 404
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@URESTART@Restart@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@URESTART@Restart@@@std@@QAE@XZ PROC	; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 121
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@URESTART@Restart@@@std@@QAE@XZ ENDP	; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 141
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??$?0URESTART@Restart@@@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *><Restart::RESTART>
PUBLIC	??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$0
__ehfuncinfo$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T146881 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z PROC ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T146881[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??$?0URESTART@Restart@@@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *><Restart::RESTART>
; Line 68
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_List_ptr@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_ptr<Restart::RESTART,std::allocator<Restart::RESTART> >
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
_TEXT	ENDS
PUBLIC	??$?0URESTART@Restart@@@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node><Restart::RESTART>
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$0
__ehfuncinfo$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T146893 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z PROC ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T146893[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@URESTART@Restart@@@std@@QAE@ABV01@@Z ; std::allocator<Restart::RESTART>::allocator<Restart::RESTART>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$?0URESTART@Restart@@@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node><Restart::RESTART>
; Line 48
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::~_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
__ehhandler$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0URESTART@Restart@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Restart::RESTART>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T146905 = -24						; size = 4
$T146904 = -20						; size = 4
$T146903 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 419
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0URESTART@Restart@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Restart::RESTART>
; Line 420
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T146905[ebp], eax
	mov	ecx, DWORD PTR $T146905[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T146904[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T146904[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T146904[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T146903[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T146903[ebp]
	mov	DWORD PTR [ecx], edx
; Line 421
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z$1:
	mov	eax, DWORD PTR $T146905[ebp]
	push	eax
	mov	ecx, DWORD PTR $T146904[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@URESTART@Restart@@@std@@@std@@IAE@V?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >::_Container_base_aux_alloc_real<std::allocator<Restart::RESTART> >
; Function compile flags: /Odtp
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx
; Line 364
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx
; Line 379
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 382
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8
; Line 146
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0URESTART@Restart@@@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0URESTART@Restart@@@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *><Restart::RESTART>, COMDAT
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0URESTART@Restart@@@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *><Restart::RESTART>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0URESTART@Restart@@@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0URESTART@Restart@@@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z PROC ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node><Restart::RESTART>, COMDAT
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0URESTART@Restart@@@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node><Restart::RESTART>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0URESTART@Restart@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0URESTART@Restart@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Restart::RESTART>, COMDAT
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0URESTART@Restart@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URESTART@Restart@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Restart::RESTART>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T146930 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 37
	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2
; Line 38
	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:
; Line 39
	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2
; Line 40
	push	0
	lea	ecx, DWORD PTR $T146930[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T146930[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:
; Line 43
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::~list<Restart::RESTART,std::allocator<Restart::RESTART> >
; Function compile flags: /Odtp
;	COMDAT ??__FpendingRestarts@Restart@@YAXXZ
text$yd	SEGMENT
??__FpendingRestarts@Restart@@YAXXZ PROC		; Restart::`dynamic atexit destructor for 'pendingRestarts'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
	call	??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::~list<Restart::RESTART,std::allocator<Restart::RESTART> >
	pop	ebp
	ret	0
??__FpendingRestarts@Restart@@YAXXZ ENDP		; Restart::`dynamic atexit destructor for 'pendingRestarts''
text$yd	ENDS
PUBLIC	?_Tidy@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::~list<Restart::RESTART,std::allocator<Restart::RESTART> >, COMDAT
; _this$ = ecx
; Line 520
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 521
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Tidy
; Line 522
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
__ehhandler$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAE@XZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::~list<Restart::RESTART,std::allocator<Restart::RESTART> >
PUBLIC	?clear@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::clear
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXXZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Tidy, COMDAT
; _this$ = ecx
; Line 1212
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1213
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::clear
; Line 1214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
; Line 1215
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node *>::destroy
; Line 1216
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
; Line 1217
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 1218
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@IAEXXZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Tidy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnext$ = -8						; size = 4
__Pnode$ = -4						; size = 4
?clear@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ PROC ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::clear, COMDAT
; _this$ = ecx
; Line 825
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 832
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
; Line 833
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax], ecx
; Line 834
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	?_Prevnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx
; Line 835
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 837
	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	je	SHORT $LN4@clear
; Line 839
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@KAAAPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@PAU342@@Z ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$[ebp], edx
; Line 840
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?destroy@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::destroy
; Line 841
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Restart::RESTART,std::allocator<Restart::RESTART> >::_Node>::deallocate
; Line 842
	jmp	SHORT $LN2@clear
$LN4@clear:
; Line 843
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@QAEXXZ ENDP ; std::list<Restart::RESTART,std::allocator<Restart::RESTART> >::clear
_TEXT	ENDS
PUBLIC	?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A ; Restart::pendingRestarts
_BSS	SEGMENT
?pendingRestarts@Restart@@3V?$list@URESTART@Restart@@V?$allocator@URESTART@Restart@@@std@@@std@@A DB 01cH DUP (?) ; Restart::pendingRestarts
_BSS	ENDS
CRT$XCU	SEGMENT
_pendingRestarts$initializer$ DD FLAT:??__EpendingRestarts@Restart@@YAXXZ
CRT$XCU	ENDS
END
